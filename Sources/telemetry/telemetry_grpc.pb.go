// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: telemetry.proto

package telemetry

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TelemetryServiceClient is the client API for TelemetryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TelemetryServiceClient interface {
	// Subscribe to 'position' updates.
	SubscribePosition(ctx context.Context, in *SubscribePositionRequest, opts ...grpc.CallOption) (TelemetryService_SubscribePositionClient, error)
	// Subscribe to 'home position' updates.
	SubscribeHome(ctx context.Context, in *SubscribeHomeRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeHomeClient, error)
	// Subscribe to in-air updates.
	SubscribeInAir(ctx context.Context, in *SubscribeInAirRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeInAirClient, error)
	// Subscribe to landed state updates
	SubscribeLandedState(ctx context.Context, in *SubscribeLandedStateRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeLandedStateClient, error)
	// Subscribe to armed updates.
	SubscribeArmed(ctx context.Context, in *SubscribeArmedRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeArmedClient, error)
	// subscribe to vtol state Updates
	SubscribeVtolState(ctx context.Context, in *SubscribeVtolStateRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeVtolStateClient, error)
	// Subscribe to 'attitude' updates (quaternion).
	SubscribeAttitudeQuaternion(ctx context.Context, in *SubscribeAttitudeQuaternionRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeAttitudeQuaternionClient, error)
	// Subscribe to 'attitude' updates (Euler).
	SubscribeAttitudeEuler(ctx context.Context, in *SubscribeAttitudeEulerRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeAttitudeEulerClient, error)
	// Subscribe to 'attitude' updates (angular velocity)
	SubscribeAttitudeAngularVelocityBody(ctx context.Context, in *SubscribeAttitudeAngularVelocityBodyRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeAttitudeAngularVelocityBodyClient, error)
	// Subscribe to 'camera attitude' updates (quaternion).
	SubscribeCameraAttitudeQuaternion(ctx context.Context, in *SubscribeCameraAttitudeQuaternionRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeCameraAttitudeQuaternionClient, error)
	// Subscribe to 'camera attitude' updates (Euler).
	SubscribeCameraAttitudeEuler(ctx context.Context, in *SubscribeCameraAttitudeEulerRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeCameraAttitudeEulerClient, error)
	// Subscribe to 'ground speed' updates (NED).
	SubscribeVelocityNed(ctx context.Context, in *SubscribeVelocityNedRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeVelocityNedClient, error)
	// Subscribe to 'GPS info' updates.
	SubscribeGpsInfo(ctx context.Context, in *SubscribeGpsInfoRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeGpsInfoClient, error)
	// Subscribe to 'Raw GPS' updates.
	SubscribeRawGps(ctx context.Context, in *SubscribeRawGpsRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeRawGpsClient, error)
	// Subscribe to 'battery' updates.
	SubscribeBattery(ctx context.Context, in *SubscribeBatteryRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeBatteryClient, error)
	// Subscribe to 'flight mode' updates.
	SubscribeFlightMode(ctx context.Context, in *SubscribeFlightModeRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeFlightModeClient, error)
	// Subscribe to 'health' updates.
	SubscribeHealth(ctx context.Context, in *SubscribeHealthRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeHealthClient, error)
	// Subscribe to 'RC status' updates.
	SubscribeRcStatus(ctx context.Context, in *SubscribeRcStatusRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeRcStatusClient, error)
	// Subscribe to 'status text' updates.
	SubscribeStatusText(ctx context.Context, in *SubscribeStatusTextRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeStatusTextClient, error)
	// Subscribe to 'actuator control target' updates.
	SubscribeActuatorControlTarget(ctx context.Context, in *SubscribeActuatorControlTargetRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeActuatorControlTargetClient, error)
	// Subscribe to 'actuator output status' updates.
	SubscribeActuatorOutputStatus(ctx context.Context, in *SubscribeActuatorOutputStatusRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeActuatorOutputStatusClient, error)
	// Subscribe to 'odometry' updates.
	SubscribeOdometry(ctx context.Context, in *SubscribeOdometryRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeOdometryClient, error)
	// Subscribe to 'position velocity' updates.
	SubscribePositionVelocityNed(ctx context.Context, in *SubscribePositionVelocityNedRequest, opts ...grpc.CallOption) (TelemetryService_SubscribePositionVelocityNedClient, error)
	// Subscribe to 'ground truth' updates.
	SubscribeGroundTruth(ctx context.Context, in *SubscribeGroundTruthRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeGroundTruthClient, error)
	// Subscribe to 'fixedwing metrics' updates.
	SubscribeFixedwingMetrics(ctx context.Context, in *SubscribeFixedwingMetricsRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeFixedwingMetricsClient, error)
	// Subscribe to 'IMU' updates (in SI units in NED body frame).
	SubscribeImu(ctx context.Context, in *SubscribeImuRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeImuClient, error)
	// Subscribe to 'Scaled IMU' updates.
	SubscribeScaledImu(ctx context.Context, in *SubscribeScaledImuRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeScaledImuClient, error)
	// Subscribe to 'Raw IMU' updates.
	SubscribeRawImu(ctx context.Context, in *SubscribeRawImuRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeRawImuClient, error)
	// Subscribe to 'HealthAllOk' updates.
	SubscribeHealthAllOk(ctx context.Context, in *SubscribeHealthAllOkRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeHealthAllOkClient, error)
	// Subscribe to 'unix epoch time' updates.
	SubscribeUnixEpochTime(ctx context.Context, in *SubscribeUnixEpochTimeRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeUnixEpochTimeClient, error)
	// Subscribe to 'Distance Sensor' updates.
	SubscribeDistanceSensor(ctx context.Context, in *SubscribeDistanceSensorRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeDistanceSensorClient, error)
	// Subscribe to 'Scaled Pressure' updates.
	SubscribeScaledPressure(ctx context.Context, in *SubscribeScaledPressureRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeScaledPressureClient, error)
	// Subscribe to 'Heading' updates.
	SubscribeHeading(ctx context.Context, in *SubscribeHeadingRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeHeadingClient, error)
	// Set rate to 'position' updates.
	SetRatePosition(ctx context.Context, in *SetRatePositionRequest, opts ...grpc.CallOption) (*SetRatePositionResponse, error)
	// Set rate to 'home position' updates.
	SetRateHome(ctx context.Context, in *SetRateHomeRequest, opts ...grpc.CallOption) (*SetRateHomeResponse, error)
	// Set rate to in-air updates.
	SetRateInAir(ctx context.Context, in *SetRateInAirRequest, opts ...grpc.CallOption) (*SetRateInAirResponse, error)
	// Set rate to landed state updates
	SetRateLandedState(ctx context.Context, in *SetRateLandedStateRequest, opts ...grpc.CallOption) (*SetRateLandedStateResponse, error)
	// Set rate to VTOL state updates
	SetRateVtolState(ctx context.Context, in *SetRateVtolStateRequest, opts ...grpc.CallOption) (*SetRateVtolStateResponse, error)
	// Set rate to 'attitude' updates.
	SetRateAttitude(ctx context.Context, in *SetRateAttitudeRequest, opts ...grpc.CallOption) (*SetRateAttitudeResponse, error)
	// Set rate of camera attitude updates.
	SetRateCameraAttitude(ctx context.Context, in *SetRateCameraAttitudeRequest, opts ...grpc.CallOption) (*SetRateCameraAttitudeResponse, error)
	// Set rate to 'ground speed' updates (NED).
	SetRateVelocityNed(ctx context.Context, in *SetRateVelocityNedRequest, opts ...grpc.CallOption) (*SetRateVelocityNedResponse, error)
	// Set rate to 'GPS info' updates.
	SetRateGpsInfo(ctx context.Context, in *SetRateGpsInfoRequest, opts ...grpc.CallOption) (*SetRateGpsInfoResponse, error)
	// Set rate to 'battery' updates.
	SetRateBattery(ctx context.Context, in *SetRateBatteryRequest, opts ...grpc.CallOption) (*SetRateBatteryResponse, error)
	// Set rate to 'RC status' updates.
	SetRateRcStatus(ctx context.Context, in *SetRateRcStatusRequest, opts ...grpc.CallOption) (*SetRateRcStatusResponse, error)
	// Set rate to 'actuator control target' updates.
	SetRateActuatorControlTarget(ctx context.Context, in *SetRateActuatorControlTargetRequest, opts ...grpc.CallOption) (*SetRateActuatorControlTargetResponse, error)
	// Set rate to 'actuator output status' updates.
	SetRateActuatorOutputStatus(ctx context.Context, in *SetRateActuatorOutputStatusRequest, opts ...grpc.CallOption) (*SetRateActuatorOutputStatusResponse, error)
	// Set rate to 'odometry' updates.
	SetRateOdometry(ctx context.Context, in *SetRateOdometryRequest, opts ...grpc.CallOption) (*SetRateOdometryResponse, error)
	// Set rate to 'position velocity' updates.
	SetRatePositionVelocityNed(ctx context.Context, in *SetRatePositionVelocityNedRequest, opts ...grpc.CallOption) (*SetRatePositionVelocityNedResponse, error)
	// Set rate to 'ground truth' updates.
	SetRateGroundTruth(ctx context.Context, in *SetRateGroundTruthRequest, opts ...grpc.CallOption) (*SetRateGroundTruthResponse, error)
	// Set rate to 'fixedwing metrics' updates.
	SetRateFixedwingMetrics(ctx context.Context, in *SetRateFixedwingMetricsRequest, opts ...grpc.CallOption) (*SetRateFixedwingMetricsResponse, error)
	// Set rate to 'IMU' updates.
	SetRateImu(ctx context.Context, in *SetRateImuRequest, opts ...grpc.CallOption) (*SetRateImuResponse, error)
	// Set rate to 'Scaled IMU' updates.
	SetRateScaledImu(ctx context.Context, in *SetRateScaledImuRequest, opts ...grpc.CallOption) (*SetRateScaledImuResponse, error)
	// Set rate to 'Raw IMU' updates.
	SetRateRawImu(ctx context.Context, in *SetRateRawImuRequest, opts ...grpc.CallOption) (*SetRateRawImuResponse, error)
	// Set rate to 'unix epoch time' updates.
	SetRateUnixEpochTime(ctx context.Context, in *SetRateUnixEpochTimeRequest, opts ...grpc.CallOption) (*SetRateUnixEpochTimeResponse, error)
	// Set rate to 'Distance Sensor' updates.
	SetRateDistanceSensor(ctx context.Context, in *SetRateDistanceSensorRequest, opts ...grpc.CallOption) (*SetRateDistanceSensorResponse, error)
	// Get the GPS location of where the estimator has been initialized.
	GetGpsGlobalOrigin(ctx context.Context, in *GetGpsGlobalOriginRequest, opts ...grpc.CallOption) (*GetGpsGlobalOriginResponse, error)
}

type telemetryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTelemetryServiceClient(cc grpc.ClientConnInterface) TelemetryServiceClient {
	return &telemetryServiceClient{cc}
}

func (c *telemetryServiceClient) SubscribePosition(ctx context.Context, in *SubscribePositionRequest, opts ...grpc.CallOption) (TelemetryService_SubscribePositionClient, error) {
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[0], "/mavsdk.rpc.telemetry.TelemetryService/SubscribePosition", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribePositionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribePositionClient interface {
	Recv() (*PositionResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribePositionClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribePositionClient) Recv() (*PositionResponse, error) {
	m := new(PositionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeHome(ctx context.Context, in *SubscribeHomeRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeHomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[1], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeHome", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeHomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeHomeClient interface {
	Recv() (*HomeResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeHomeClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeHomeClient) Recv() (*HomeResponse, error) {
	m := new(HomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeInAir(ctx context.Context, in *SubscribeInAirRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeInAirClient, error) {
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[2], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeInAir", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeInAirClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeInAirClient interface {
	Recv() (*InAirResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeInAirClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeInAirClient) Recv() (*InAirResponse, error) {
	m := new(InAirResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeLandedState(ctx context.Context, in *SubscribeLandedStateRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeLandedStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[3], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeLandedState", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeLandedStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeLandedStateClient interface {
	Recv() (*LandedStateResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeLandedStateClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeLandedStateClient) Recv() (*LandedStateResponse, error) {
	m := new(LandedStateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeArmed(ctx context.Context, in *SubscribeArmedRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeArmedClient, error) {
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[4], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeArmed", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeArmedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeArmedClient interface {
	Recv() (*ArmedResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeArmedClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeArmedClient) Recv() (*ArmedResponse, error) {
	m := new(ArmedResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeVtolState(ctx context.Context, in *SubscribeVtolStateRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeVtolStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[5], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeVtolState", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeVtolStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeVtolStateClient interface {
	Recv() (*VtolStateResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeVtolStateClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeVtolStateClient) Recv() (*VtolStateResponse, error) {
	m := new(VtolStateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeAttitudeQuaternion(ctx context.Context, in *SubscribeAttitudeQuaternionRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeAttitudeQuaternionClient, error) {
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[6], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeAttitudeQuaternion", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeAttitudeQuaternionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeAttitudeQuaternionClient interface {
	Recv() (*AttitudeQuaternionResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeAttitudeQuaternionClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeAttitudeQuaternionClient) Recv() (*AttitudeQuaternionResponse, error) {
	m := new(AttitudeQuaternionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeAttitudeEuler(ctx context.Context, in *SubscribeAttitudeEulerRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeAttitudeEulerClient, error) {
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[7], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeAttitudeEuler", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeAttitudeEulerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeAttitudeEulerClient interface {
	Recv() (*AttitudeEulerResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeAttitudeEulerClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeAttitudeEulerClient) Recv() (*AttitudeEulerResponse, error) {
	m := new(AttitudeEulerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeAttitudeAngularVelocityBody(ctx context.Context, in *SubscribeAttitudeAngularVelocityBodyRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeAttitudeAngularVelocityBodyClient, error) {
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[8], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeAttitudeAngularVelocityBody", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeAttitudeAngularVelocityBodyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeAttitudeAngularVelocityBodyClient interface {
	Recv() (*AttitudeAngularVelocityBodyResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeAttitudeAngularVelocityBodyClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeAttitudeAngularVelocityBodyClient) Recv() (*AttitudeAngularVelocityBodyResponse, error) {
	m := new(AttitudeAngularVelocityBodyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeCameraAttitudeQuaternion(ctx context.Context, in *SubscribeCameraAttitudeQuaternionRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeCameraAttitudeQuaternionClient, error) {
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[9], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeCameraAttitudeQuaternion", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeCameraAttitudeQuaternionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeCameraAttitudeQuaternionClient interface {
	Recv() (*CameraAttitudeQuaternionResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeCameraAttitudeQuaternionClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeCameraAttitudeQuaternionClient) Recv() (*CameraAttitudeQuaternionResponse, error) {
	m := new(CameraAttitudeQuaternionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeCameraAttitudeEuler(ctx context.Context, in *SubscribeCameraAttitudeEulerRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeCameraAttitudeEulerClient, error) {
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[10], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeCameraAttitudeEuler", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeCameraAttitudeEulerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeCameraAttitudeEulerClient interface {
	Recv() (*CameraAttitudeEulerResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeCameraAttitudeEulerClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeCameraAttitudeEulerClient) Recv() (*CameraAttitudeEulerResponse, error) {
	m := new(CameraAttitudeEulerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeVelocityNed(ctx context.Context, in *SubscribeVelocityNedRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeVelocityNedClient, error) {
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[11], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeVelocityNed", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeVelocityNedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeVelocityNedClient interface {
	Recv() (*VelocityNedResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeVelocityNedClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeVelocityNedClient) Recv() (*VelocityNedResponse, error) {
	m := new(VelocityNedResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeGpsInfo(ctx context.Context, in *SubscribeGpsInfoRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeGpsInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[12], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeGpsInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeGpsInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeGpsInfoClient interface {
	Recv() (*GpsInfoResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeGpsInfoClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeGpsInfoClient) Recv() (*GpsInfoResponse, error) {
	m := new(GpsInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeRawGps(ctx context.Context, in *SubscribeRawGpsRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeRawGpsClient, error) {
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[13], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeRawGps", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeRawGpsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeRawGpsClient interface {
	Recv() (*RawGpsResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeRawGpsClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeRawGpsClient) Recv() (*RawGpsResponse, error) {
	m := new(RawGpsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeBattery(ctx context.Context, in *SubscribeBatteryRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeBatteryClient, error) {
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[14], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeBattery", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeBatteryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeBatteryClient interface {
	Recv() (*BatteryResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeBatteryClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeBatteryClient) Recv() (*BatteryResponse, error) {
	m := new(BatteryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeFlightMode(ctx context.Context, in *SubscribeFlightModeRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeFlightModeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[15], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeFlightMode", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeFlightModeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeFlightModeClient interface {
	Recv() (*FlightModeResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeFlightModeClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeFlightModeClient) Recv() (*FlightModeResponse, error) {
	m := new(FlightModeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeHealth(ctx context.Context, in *SubscribeHealthRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeHealthClient, error) {
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[16], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeHealth", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeHealthClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeHealthClient interface {
	Recv() (*HealthResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeHealthClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeHealthClient) Recv() (*HealthResponse, error) {
	m := new(HealthResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeRcStatus(ctx context.Context, in *SubscribeRcStatusRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeRcStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[17], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeRcStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeRcStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeRcStatusClient interface {
	Recv() (*RcStatusResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeRcStatusClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeRcStatusClient) Recv() (*RcStatusResponse, error) {
	m := new(RcStatusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeStatusText(ctx context.Context, in *SubscribeStatusTextRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeStatusTextClient, error) {
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[18], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeStatusText", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeStatusTextClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeStatusTextClient interface {
	Recv() (*StatusTextResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeStatusTextClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeStatusTextClient) Recv() (*StatusTextResponse, error) {
	m := new(StatusTextResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeActuatorControlTarget(ctx context.Context, in *SubscribeActuatorControlTargetRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeActuatorControlTargetClient, error) {
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[19], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeActuatorControlTarget", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeActuatorControlTargetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeActuatorControlTargetClient interface {
	Recv() (*ActuatorControlTargetResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeActuatorControlTargetClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeActuatorControlTargetClient) Recv() (*ActuatorControlTargetResponse, error) {
	m := new(ActuatorControlTargetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeActuatorOutputStatus(ctx context.Context, in *SubscribeActuatorOutputStatusRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeActuatorOutputStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[20], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeActuatorOutputStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeActuatorOutputStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeActuatorOutputStatusClient interface {
	Recv() (*ActuatorOutputStatusResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeActuatorOutputStatusClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeActuatorOutputStatusClient) Recv() (*ActuatorOutputStatusResponse, error) {
	m := new(ActuatorOutputStatusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeOdometry(ctx context.Context, in *SubscribeOdometryRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeOdometryClient, error) {
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[21], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeOdometry", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeOdometryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeOdometryClient interface {
	Recv() (*OdometryResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeOdometryClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeOdometryClient) Recv() (*OdometryResponse, error) {
	m := new(OdometryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribePositionVelocityNed(ctx context.Context, in *SubscribePositionVelocityNedRequest, opts ...grpc.CallOption) (TelemetryService_SubscribePositionVelocityNedClient, error) {
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[22], "/mavsdk.rpc.telemetry.TelemetryService/SubscribePositionVelocityNed", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribePositionVelocityNedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribePositionVelocityNedClient interface {
	Recv() (*PositionVelocityNedResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribePositionVelocityNedClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribePositionVelocityNedClient) Recv() (*PositionVelocityNedResponse, error) {
	m := new(PositionVelocityNedResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeGroundTruth(ctx context.Context, in *SubscribeGroundTruthRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeGroundTruthClient, error) {
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[23], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeGroundTruth", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeGroundTruthClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeGroundTruthClient interface {
	Recv() (*GroundTruthResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeGroundTruthClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeGroundTruthClient) Recv() (*GroundTruthResponse, error) {
	m := new(GroundTruthResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeFixedwingMetrics(ctx context.Context, in *SubscribeFixedwingMetricsRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeFixedwingMetricsClient, error) {
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[24], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeFixedwingMetrics", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeFixedwingMetricsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeFixedwingMetricsClient interface {
	Recv() (*FixedwingMetricsResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeFixedwingMetricsClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeFixedwingMetricsClient) Recv() (*FixedwingMetricsResponse, error) {
	m := new(FixedwingMetricsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeImu(ctx context.Context, in *SubscribeImuRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeImuClient, error) {
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[25], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeImu", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeImuClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeImuClient interface {
	Recv() (*ImuResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeImuClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeImuClient) Recv() (*ImuResponse, error) {
	m := new(ImuResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeScaledImu(ctx context.Context, in *SubscribeScaledImuRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeScaledImuClient, error) {
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[26], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeScaledImu", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeScaledImuClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeScaledImuClient interface {
	Recv() (*ScaledImuResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeScaledImuClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeScaledImuClient) Recv() (*ScaledImuResponse, error) {
	m := new(ScaledImuResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeRawImu(ctx context.Context, in *SubscribeRawImuRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeRawImuClient, error) {
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[27], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeRawImu", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeRawImuClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeRawImuClient interface {
	Recv() (*RawImuResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeRawImuClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeRawImuClient) Recv() (*RawImuResponse, error) {
	m := new(RawImuResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeHealthAllOk(ctx context.Context, in *SubscribeHealthAllOkRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeHealthAllOkClient, error) {
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[28], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeHealthAllOk", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeHealthAllOkClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeHealthAllOkClient interface {
	Recv() (*HealthAllOkResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeHealthAllOkClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeHealthAllOkClient) Recv() (*HealthAllOkResponse, error) {
	m := new(HealthAllOkResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeUnixEpochTime(ctx context.Context, in *SubscribeUnixEpochTimeRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeUnixEpochTimeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[29], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeUnixEpochTime", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeUnixEpochTimeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeUnixEpochTimeClient interface {
	Recv() (*UnixEpochTimeResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeUnixEpochTimeClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeUnixEpochTimeClient) Recv() (*UnixEpochTimeResponse, error) {
	m := new(UnixEpochTimeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeDistanceSensor(ctx context.Context, in *SubscribeDistanceSensorRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeDistanceSensorClient, error) {
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[30], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeDistanceSensor", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeDistanceSensorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeDistanceSensorClient interface {
	Recv() (*DistanceSensorResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeDistanceSensorClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeDistanceSensorClient) Recv() (*DistanceSensorResponse, error) {
	m := new(DistanceSensorResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeScaledPressure(ctx context.Context, in *SubscribeScaledPressureRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeScaledPressureClient, error) {
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[31], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeScaledPressure", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeScaledPressureClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeScaledPressureClient interface {
	Recv() (*ScaledPressureResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeScaledPressureClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeScaledPressureClient) Recv() (*ScaledPressureResponse, error) {
	m := new(ScaledPressureResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SubscribeHeading(ctx context.Context, in *SubscribeHeadingRequest, opts ...grpc.CallOption) (TelemetryService_SubscribeHeadingClient, error) {
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[32], "/mavsdk.rpc.telemetry.TelemetryService/SubscribeHeading", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeHeadingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeHeadingClient interface {
	Recv() (*HeadingResponse, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeHeadingClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeHeadingClient) Recv() (*HeadingResponse, error) {
	m := new(HeadingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) SetRatePosition(ctx context.Context, in *SetRatePositionRequest, opts ...grpc.CallOption) (*SetRatePositionResponse, error) {
	out := new(SetRatePositionResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.telemetry.TelemetryService/SetRatePosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SetRateHome(ctx context.Context, in *SetRateHomeRequest, opts ...grpc.CallOption) (*SetRateHomeResponse, error) {
	out := new(SetRateHomeResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.telemetry.TelemetryService/SetRateHome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SetRateInAir(ctx context.Context, in *SetRateInAirRequest, opts ...grpc.CallOption) (*SetRateInAirResponse, error) {
	out := new(SetRateInAirResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.telemetry.TelemetryService/SetRateInAir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SetRateLandedState(ctx context.Context, in *SetRateLandedStateRequest, opts ...grpc.CallOption) (*SetRateLandedStateResponse, error) {
	out := new(SetRateLandedStateResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.telemetry.TelemetryService/SetRateLandedState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SetRateVtolState(ctx context.Context, in *SetRateVtolStateRequest, opts ...grpc.CallOption) (*SetRateVtolStateResponse, error) {
	out := new(SetRateVtolStateResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.telemetry.TelemetryService/SetRateVtolState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SetRateAttitude(ctx context.Context, in *SetRateAttitudeRequest, opts ...grpc.CallOption) (*SetRateAttitudeResponse, error) {
	out := new(SetRateAttitudeResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.telemetry.TelemetryService/SetRateAttitude", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SetRateCameraAttitude(ctx context.Context, in *SetRateCameraAttitudeRequest, opts ...grpc.CallOption) (*SetRateCameraAttitudeResponse, error) {
	out := new(SetRateCameraAttitudeResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.telemetry.TelemetryService/SetRateCameraAttitude", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SetRateVelocityNed(ctx context.Context, in *SetRateVelocityNedRequest, opts ...grpc.CallOption) (*SetRateVelocityNedResponse, error) {
	out := new(SetRateVelocityNedResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.telemetry.TelemetryService/SetRateVelocityNed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SetRateGpsInfo(ctx context.Context, in *SetRateGpsInfoRequest, opts ...grpc.CallOption) (*SetRateGpsInfoResponse, error) {
	out := new(SetRateGpsInfoResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.telemetry.TelemetryService/SetRateGpsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SetRateBattery(ctx context.Context, in *SetRateBatteryRequest, opts ...grpc.CallOption) (*SetRateBatteryResponse, error) {
	out := new(SetRateBatteryResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.telemetry.TelemetryService/SetRateBattery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SetRateRcStatus(ctx context.Context, in *SetRateRcStatusRequest, opts ...grpc.CallOption) (*SetRateRcStatusResponse, error) {
	out := new(SetRateRcStatusResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.telemetry.TelemetryService/SetRateRcStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SetRateActuatorControlTarget(ctx context.Context, in *SetRateActuatorControlTargetRequest, opts ...grpc.CallOption) (*SetRateActuatorControlTargetResponse, error) {
	out := new(SetRateActuatorControlTargetResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.telemetry.TelemetryService/SetRateActuatorControlTarget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SetRateActuatorOutputStatus(ctx context.Context, in *SetRateActuatorOutputStatusRequest, opts ...grpc.CallOption) (*SetRateActuatorOutputStatusResponse, error) {
	out := new(SetRateActuatorOutputStatusResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.telemetry.TelemetryService/SetRateActuatorOutputStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SetRateOdometry(ctx context.Context, in *SetRateOdometryRequest, opts ...grpc.CallOption) (*SetRateOdometryResponse, error) {
	out := new(SetRateOdometryResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.telemetry.TelemetryService/SetRateOdometry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SetRatePositionVelocityNed(ctx context.Context, in *SetRatePositionVelocityNedRequest, opts ...grpc.CallOption) (*SetRatePositionVelocityNedResponse, error) {
	out := new(SetRatePositionVelocityNedResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.telemetry.TelemetryService/SetRatePositionVelocityNed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SetRateGroundTruth(ctx context.Context, in *SetRateGroundTruthRequest, opts ...grpc.CallOption) (*SetRateGroundTruthResponse, error) {
	out := new(SetRateGroundTruthResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.telemetry.TelemetryService/SetRateGroundTruth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SetRateFixedwingMetrics(ctx context.Context, in *SetRateFixedwingMetricsRequest, opts ...grpc.CallOption) (*SetRateFixedwingMetricsResponse, error) {
	out := new(SetRateFixedwingMetricsResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.telemetry.TelemetryService/SetRateFixedwingMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SetRateImu(ctx context.Context, in *SetRateImuRequest, opts ...grpc.CallOption) (*SetRateImuResponse, error) {
	out := new(SetRateImuResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.telemetry.TelemetryService/SetRateImu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SetRateScaledImu(ctx context.Context, in *SetRateScaledImuRequest, opts ...grpc.CallOption) (*SetRateScaledImuResponse, error) {
	out := new(SetRateScaledImuResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.telemetry.TelemetryService/SetRateScaledImu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SetRateRawImu(ctx context.Context, in *SetRateRawImuRequest, opts ...grpc.CallOption) (*SetRateRawImuResponse, error) {
	out := new(SetRateRawImuResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.telemetry.TelemetryService/SetRateRawImu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SetRateUnixEpochTime(ctx context.Context, in *SetRateUnixEpochTimeRequest, opts ...grpc.CallOption) (*SetRateUnixEpochTimeResponse, error) {
	out := new(SetRateUnixEpochTimeResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.telemetry.TelemetryService/SetRateUnixEpochTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SetRateDistanceSensor(ctx context.Context, in *SetRateDistanceSensorRequest, opts ...grpc.CallOption) (*SetRateDistanceSensorResponse, error) {
	out := new(SetRateDistanceSensorResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.telemetry.TelemetryService/SetRateDistanceSensor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) GetGpsGlobalOrigin(ctx context.Context, in *GetGpsGlobalOriginRequest, opts ...grpc.CallOption) (*GetGpsGlobalOriginResponse, error) {
	out := new(GetGpsGlobalOriginResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.telemetry.TelemetryService/GetGpsGlobalOrigin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TelemetryServiceServer is the server API for TelemetryService service.
// All implementations must embed UnimplementedTelemetryServiceServer
// for forward compatibility
type TelemetryServiceServer interface {
	// Subscribe to 'position' updates.
	SubscribePosition(*SubscribePositionRequest, TelemetryService_SubscribePositionServer) error
	// Subscribe to 'home position' updates.
	SubscribeHome(*SubscribeHomeRequest, TelemetryService_SubscribeHomeServer) error
	// Subscribe to in-air updates.
	SubscribeInAir(*SubscribeInAirRequest, TelemetryService_SubscribeInAirServer) error
	// Subscribe to landed state updates
	SubscribeLandedState(*SubscribeLandedStateRequest, TelemetryService_SubscribeLandedStateServer) error
	// Subscribe to armed updates.
	SubscribeArmed(*SubscribeArmedRequest, TelemetryService_SubscribeArmedServer) error
	// subscribe to vtol state Updates
	SubscribeVtolState(*SubscribeVtolStateRequest, TelemetryService_SubscribeVtolStateServer) error
	// Subscribe to 'attitude' updates (quaternion).
	SubscribeAttitudeQuaternion(*SubscribeAttitudeQuaternionRequest, TelemetryService_SubscribeAttitudeQuaternionServer) error
	// Subscribe to 'attitude' updates (Euler).
	SubscribeAttitudeEuler(*SubscribeAttitudeEulerRequest, TelemetryService_SubscribeAttitudeEulerServer) error
	// Subscribe to 'attitude' updates (angular velocity)
	SubscribeAttitudeAngularVelocityBody(*SubscribeAttitudeAngularVelocityBodyRequest, TelemetryService_SubscribeAttitudeAngularVelocityBodyServer) error
	// Subscribe to 'camera attitude' updates (quaternion).
	SubscribeCameraAttitudeQuaternion(*SubscribeCameraAttitudeQuaternionRequest, TelemetryService_SubscribeCameraAttitudeQuaternionServer) error
	// Subscribe to 'camera attitude' updates (Euler).
	SubscribeCameraAttitudeEuler(*SubscribeCameraAttitudeEulerRequest, TelemetryService_SubscribeCameraAttitudeEulerServer) error
	// Subscribe to 'ground speed' updates (NED).
	SubscribeVelocityNed(*SubscribeVelocityNedRequest, TelemetryService_SubscribeVelocityNedServer) error
	// Subscribe to 'GPS info' updates.
	SubscribeGpsInfo(*SubscribeGpsInfoRequest, TelemetryService_SubscribeGpsInfoServer) error
	// Subscribe to 'Raw GPS' updates.
	SubscribeRawGps(*SubscribeRawGpsRequest, TelemetryService_SubscribeRawGpsServer) error
	// Subscribe to 'battery' updates.
	SubscribeBattery(*SubscribeBatteryRequest, TelemetryService_SubscribeBatteryServer) error
	// Subscribe to 'flight mode' updates.
	SubscribeFlightMode(*SubscribeFlightModeRequest, TelemetryService_SubscribeFlightModeServer) error
	// Subscribe to 'health' updates.
	SubscribeHealth(*SubscribeHealthRequest, TelemetryService_SubscribeHealthServer) error
	// Subscribe to 'RC status' updates.
	SubscribeRcStatus(*SubscribeRcStatusRequest, TelemetryService_SubscribeRcStatusServer) error
	// Subscribe to 'status text' updates.
	SubscribeStatusText(*SubscribeStatusTextRequest, TelemetryService_SubscribeStatusTextServer) error
	// Subscribe to 'actuator control target' updates.
	SubscribeActuatorControlTarget(*SubscribeActuatorControlTargetRequest, TelemetryService_SubscribeActuatorControlTargetServer) error
	// Subscribe to 'actuator output status' updates.
	SubscribeActuatorOutputStatus(*SubscribeActuatorOutputStatusRequest, TelemetryService_SubscribeActuatorOutputStatusServer) error
	// Subscribe to 'odometry' updates.
	SubscribeOdometry(*SubscribeOdometryRequest, TelemetryService_SubscribeOdometryServer) error
	// Subscribe to 'position velocity' updates.
	SubscribePositionVelocityNed(*SubscribePositionVelocityNedRequest, TelemetryService_SubscribePositionVelocityNedServer) error
	// Subscribe to 'ground truth' updates.
	SubscribeGroundTruth(*SubscribeGroundTruthRequest, TelemetryService_SubscribeGroundTruthServer) error
	// Subscribe to 'fixedwing metrics' updates.
	SubscribeFixedwingMetrics(*SubscribeFixedwingMetricsRequest, TelemetryService_SubscribeFixedwingMetricsServer) error
	// Subscribe to 'IMU' updates (in SI units in NED body frame).
	SubscribeImu(*SubscribeImuRequest, TelemetryService_SubscribeImuServer) error
	// Subscribe to 'Scaled IMU' updates.
	SubscribeScaledImu(*SubscribeScaledImuRequest, TelemetryService_SubscribeScaledImuServer) error
	// Subscribe to 'Raw IMU' updates.
	SubscribeRawImu(*SubscribeRawImuRequest, TelemetryService_SubscribeRawImuServer) error
	// Subscribe to 'HealthAllOk' updates.
	SubscribeHealthAllOk(*SubscribeHealthAllOkRequest, TelemetryService_SubscribeHealthAllOkServer) error
	// Subscribe to 'unix epoch time' updates.
	SubscribeUnixEpochTime(*SubscribeUnixEpochTimeRequest, TelemetryService_SubscribeUnixEpochTimeServer) error
	// Subscribe to 'Distance Sensor' updates.
	SubscribeDistanceSensor(*SubscribeDistanceSensorRequest, TelemetryService_SubscribeDistanceSensorServer) error
	// Subscribe to 'Scaled Pressure' updates.
	SubscribeScaledPressure(*SubscribeScaledPressureRequest, TelemetryService_SubscribeScaledPressureServer) error
	// Subscribe to 'Heading' updates.
	SubscribeHeading(*SubscribeHeadingRequest, TelemetryService_SubscribeHeadingServer) error
	// Set rate to 'position' updates.
	SetRatePosition(context.Context, *SetRatePositionRequest) (*SetRatePositionResponse, error)
	// Set rate to 'home position' updates.
	SetRateHome(context.Context, *SetRateHomeRequest) (*SetRateHomeResponse, error)
	// Set rate to in-air updates.
	SetRateInAir(context.Context, *SetRateInAirRequest) (*SetRateInAirResponse, error)
	// Set rate to landed state updates
	SetRateLandedState(context.Context, *SetRateLandedStateRequest) (*SetRateLandedStateResponse, error)
	// Set rate to VTOL state updates
	SetRateVtolState(context.Context, *SetRateVtolStateRequest) (*SetRateVtolStateResponse, error)
	// Set rate to 'attitude' updates.
	SetRateAttitude(context.Context, *SetRateAttitudeRequest) (*SetRateAttitudeResponse, error)
	// Set rate of camera attitude updates.
	SetRateCameraAttitude(context.Context, *SetRateCameraAttitudeRequest) (*SetRateCameraAttitudeResponse, error)
	// Set rate to 'ground speed' updates (NED).
	SetRateVelocityNed(context.Context, *SetRateVelocityNedRequest) (*SetRateVelocityNedResponse, error)
	// Set rate to 'GPS info' updates.
	SetRateGpsInfo(context.Context, *SetRateGpsInfoRequest) (*SetRateGpsInfoResponse, error)
	// Set rate to 'battery' updates.
	SetRateBattery(context.Context, *SetRateBatteryRequest) (*SetRateBatteryResponse, error)
	// Set rate to 'RC status' updates.
	SetRateRcStatus(context.Context, *SetRateRcStatusRequest) (*SetRateRcStatusResponse, error)
	// Set rate to 'actuator control target' updates.
	SetRateActuatorControlTarget(context.Context, *SetRateActuatorControlTargetRequest) (*SetRateActuatorControlTargetResponse, error)
	// Set rate to 'actuator output status' updates.
	SetRateActuatorOutputStatus(context.Context, *SetRateActuatorOutputStatusRequest) (*SetRateActuatorOutputStatusResponse, error)
	// Set rate to 'odometry' updates.
	SetRateOdometry(context.Context, *SetRateOdometryRequest) (*SetRateOdometryResponse, error)
	// Set rate to 'position velocity' updates.
	SetRatePositionVelocityNed(context.Context, *SetRatePositionVelocityNedRequest) (*SetRatePositionVelocityNedResponse, error)
	// Set rate to 'ground truth' updates.
	SetRateGroundTruth(context.Context, *SetRateGroundTruthRequest) (*SetRateGroundTruthResponse, error)
	// Set rate to 'fixedwing metrics' updates.
	SetRateFixedwingMetrics(context.Context, *SetRateFixedwingMetricsRequest) (*SetRateFixedwingMetricsResponse, error)
	// Set rate to 'IMU' updates.
	SetRateImu(context.Context, *SetRateImuRequest) (*SetRateImuResponse, error)
	// Set rate to 'Scaled IMU' updates.
	SetRateScaledImu(context.Context, *SetRateScaledImuRequest) (*SetRateScaledImuResponse, error)
	// Set rate to 'Raw IMU' updates.
	SetRateRawImu(context.Context, *SetRateRawImuRequest) (*SetRateRawImuResponse, error)
	// Set rate to 'unix epoch time' updates.
	SetRateUnixEpochTime(context.Context, *SetRateUnixEpochTimeRequest) (*SetRateUnixEpochTimeResponse, error)
	// Set rate to 'Distance Sensor' updates.
	SetRateDistanceSensor(context.Context, *SetRateDistanceSensorRequest) (*SetRateDistanceSensorResponse, error)
	// Get the GPS location of where the estimator has been initialized.
	GetGpsGlobalOrigin(context.Context, *GetGpsGlobalOriginRequest) (*GetGpsGlobalOriginResponse, error)
	mustEmbedUnimplementedTelemetryServiceServer()
}

// UnimplementedTelemetryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTelemetryServiceServer struct {
}

func (UnimplementedTelemetryServiceServer) SubscribePosition(*SubscribePositionRequest, TelemetryService_SubscribePositionServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribePosition not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeHome(*SubscribeHomeRequest, TelemetryService_SubscribeHomeServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeHome not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeInAir(*SubscribeInAirRequest, TelemetryService_SubscribeInAirServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeInAir not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeLandedState(*SubscribeLandedStateRequest, TelemetryService_SubscribeLandedStateServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeLandedState not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeArmed(*SubscribeArmedRequest, TelemetryService_SubscribeArmedServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeArmed not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeVtolState(*SubscribeVtolStateRequest, TelemetryService_SubscribeVtolStateServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeVtolState not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeAttitudeQuaternion(*SubscribeAttitudeQuaternionRequest, TelemetryService_SubscribeAttitudeQuaternionServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeAttitudeQuaternion not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeAttitudeEuler(*SubscribeAttitudeEulerRequest, TelemetryService_SubscribeAttitudeEulerServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeAttitudeEuler not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeAttitudeAngularVelocityBody(*SubscribeAttitudeAngularVelocityBodyRequest, TelemetryService_SubscribeAttitudeAngularVelocityBodyServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeAttitudeAngularVelocityBody not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeCameraAttitudeQuaternion(*SubscribeCameraAttitudeQuaternionRequest, TelemetryService_SubscribeCameraAttitudeQuaternionServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeCameraAttitudeQuaternion not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeCameraAttitudeEuler(*SubscribeCameraAttitudeEulerRequest, TelemetryService_SubscribeCameraAttitudeEulerServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeCameraAttitudeEuler not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeVelocityNed(*SubscribeVelocityNedRequest, TelemetryService_SubscribeVelocityNedServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeVelocityNed not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeGpsInfo(*SubscribeGpsInfoRequest, TelemetryService_SubscribeGpsInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeGpsInfo not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeRawGps(*SubscribeRawGpsRequest, TelemetryService_SubscribeRawGpsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeRawGps not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeBattery(*SubscribeBatteryRequest, TelemetryService_SubscribeBatteryServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBattery not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeFlightMode(*SubscribeFlightModeRequest, TelemetryService_SubscribeFlightModeServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeFlightMode not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeHealth(*SubscribeHealthRequest, TelemetryService_SubscribeHealthServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeHealth not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeRcStatus(*SubscribeRcStatusRequest, TelemetryService_SubscribeRcStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeRcStatus not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeStatusText(*SubscribeStatusTextRequest, TelemetryService_SubscribeStatusTextServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeStatusText not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeActuatorControlTarget(*SubscribeActuatorControlTargetRequest, TelemetryService_SubscribeActuatorControlTargetServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeActuatorControlTarget not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeActuatorOutputStatus(*SubscribeActuatorOutputStatusRequest, TelemetryService_SubscribeActuatorOutputStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeActuatorOutputStatus not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeOdometry(*SubscribeOdometryRequest, TelemetryService_SubscribeOdometryServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeOdometry not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribePositionVelocityNed(*SubscribePositionVelocityNedRequest, TelemetryService_SubscribePositionVelocityNedServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribePositionVelocityNed not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeGroundTruth(*SubscribeGroundTruthRequest, TelemetryService_SubscribeGroundTruthServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeGroundTruth not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeFixedwingMetrics(*SubscribeFixedwingMetricsRequest, TelemetryService_SubscribeFixedwingMetricsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeFixedwingMetrics not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeImu(*SubscribeImuRequest, TelemetryService_SubscribeImuServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeImu not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeScaledImu(*SubscribeScaledImuRequest, TelemetryService_SubscribeScaledImuServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeScaledImu not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeRawImu(*SubscribeRawImuRequest, TelemetryService_SubscribeRawImuServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeRawImu not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeHealthAllOk(*SubscribeHealthAllOkRequest, TelemetryService_SubscribeHealthAllOkServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeHealthAllOk not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeUnixEpochTime(*SubscribeUnixEpochTimeRequest, TelemetryService_SubscribeUnixEpochTimeServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeUnixEpochTime not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeDistanceSensor(*SubscribeDistanceSensorRequest, TelemetryService_SubscribeDistanceSensorServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeDistanceSensor not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeScaledPressure(*SubscribeScaledPressureRequest, TelemetryService_SubscribeScaledPressureServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeScaledPressure not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeHeading(*SubscribeHeadingRequest, TelemetryService_SubscribeHeadingServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeHeading not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRatePosition(context.Context, *SetRatePositionRequest) (*SetRatePositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRatePosition not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRateHome(context.Context, *SetRateHomeRequest) (*SetRateHomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRateHome not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRateInAir(context.Context, *SetRateInAirRequest) (*SetRateInAirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRateInAir not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRateLandedState(context.Context, *SetRateLandedStateRequest) (*SetRateLandedStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRateLandedState not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRateVtolState(context.Context, *SetRateVtolStateRequest) (*SetRateVtolStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRateVtolState not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRateAttitude(context.Context, *SetRateAttitudeRequest) (*SetRateAttitudeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRateAttitude not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRateCameraAttitude(context.Context, *SetRateCameraAttitudeRequest) (*SetRateCameraAttitudeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRateCameraAttitude not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRateVelocityNed(context.Context, *SetRateVelocityNedRequest) (*SetRateVelocityNedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRateVelocityNed not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRateGpsInfo(context.Context, *SetRateGpsInfoRequest) (*SetRateGpsInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRateGpsInfo not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRateBattery(context.Context, *SetRateBatteryRequest) (*SetRateBatteryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRateBattery not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRateRcStatus(context.Context, *SetRateRcStatusRequest) (*SetRateRcStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRateRcStatus not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRateActuatorControlTarget(context.Context, *SetRateActuatorControlTargetRequest) (*SetRateActuatorControlTargetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRateActuatorControlTarget not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRateActuatorOutputStatus(context.Context, *SetRateActuatorOutputStatusRequest) (*SetRateActuatorOutputStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRateActuatorOutputStatus not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRateOdometry(context.Context, *SetRateOdometryRequest) (*SetRateOdometryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRateOdometry not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRatePositionVelocityNed(context.Context, *SetRatePositionVelocityNedRequest) (*SetRatePositionVelocityNedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRatePositionVelocityNed not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRateGroundTruth(context.Context, *SetRateGroundTruthRequest) (*SetRateGroundTruthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRateGroundTruth not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRateFixedwingMetrics(context.Context, *SetRateFixedwingMetricsRequest) (*SetRateFixedwingMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRateFixedwingMetrics not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRateImu(context.Context, *SetRateImuRequest) (*SetRateImuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRateImu not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRateScaledImu(context.Context, *SetRateScaledImuRequest) (*SetRateScaledImuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRateScaledImu not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRateRawImu(context.Context, *SetRateRawImuRequest) (*SetRateRawImuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRateRawImu not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRateUnixEpochTime(context.Context, *SetRateUnixEpochTimeRequest) (*SetRateUnixEpochTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRateUnixEpochTime not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRateDistanceSensor(context.Context, *SetRateDistanceSensorRequest) (*SetRateDistanceSensorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRateDistanceSensor not implemented")
}
func (UnimplementedTelemetryServiceServer) GetGpsGlobalOrigin(context.Context, *GetGpsGlobalOriginRequest) (*GetGpsGlobalOriginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGpsGlobalOrigin not implemented")
}
func (UnimplementedTelemetryServiceServer) mustEmbedUnimplementedTelemetryServiceServer() {}

// UnsafeTelemetryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TelemetryServiceServer will
// result in compilation errors.
type UnsafeTelemetryServiceServer interface {
	mustEmbedUnimplementedTelemetryServiceServer()
}

func RegisterTelemetryServiceServer(s grpc.ServiceRegistrar, srv TelemetryServiceServer) {
	s.RegisterService(&TelemetryService_ServiceDesc, srv)
}

func _TelemetryService_SubscribePosition_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribePositionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribePosition(m, &telemetryServiceSubscribePositionServer{stream})
}

type TelemetryService_SubscribePositionServer interface {
	Send(*PositionResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribePositionServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribePositionServer) Send(m *PositionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeHome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeHomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeHome(m, &telemetryServiceSubscribeHomeServer{stream})
}

type TelemetryService_SubscribeHomeServer interface {
	Send(*HomeResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeHomeServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeHomeServer) Send(m *HomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeInAir_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeInAirRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeInAir(m, &telemetryServiceSubscribeInAirServer{stream})
}

type TelemetryService_SubscribeInAirServer interface {
	Send(*InAirResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeInAirServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeInAirServer) Send(m *InAirResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeLandedState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeLandedStateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeLandedState(m, &telemetryServiceSubscribeLandedStateServer{stream})
}

type TelemetryService_SubscribeLandedStateServer interface {
	Send(*LandedStateResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeLandedStateServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeLandedStateServer) Send(m *LandedStateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeArmed_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeArmedRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeArmed(m, &telemetryServiceSubscribeArmedServer{stream})
}

type TelemetryService_SubscribeArmedServer interface {
	Send(*ArmedResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeArmedServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeArmedServer) Send(m *ArmedResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeVtolState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeVtolStateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeVtolState(m, &telemetryServiceSubscribeVtolStateServer{stream})
}

type TelemetryService_SubscribeVtolStateServer interface {
	Send(*VtolStateResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeVtolStateServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeVtolStateServer) Send(m *VtolStateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeAttitudeQuaternion_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeAttitudeQuaternionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeAttitudeQuaternion(m, &telemetryServiceSubscribeAttitudeQuaternionServer{stream})
}

type TelemetryService_SubscribeAttitudeQuaternionServer interface {
	Send(*AttitudeQuaternionResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeAttitudeQuaternionServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeAttitudeQuaternionServer) Send(m *AttitudeQuaternionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeAttitudeEuler_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeAttitudeEulerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeAttitudeEuler(m, &telemetryServiceSubscribeAttitudeEulerServer{stream})
}

type TelemetryService_SubscribeAttitudeEulerServer interface {
	Send(*AttitudeEulerResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeAttitudeEulerServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeAttitudeEulerServer) Send(m *AttitudeEulerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeAttitudeAngularVelocityBody_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeAttitudeAngularVelocityBodyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeAttitudeAngularVelocityBody(m, &telemetryServiceSubscribeAttitudeAngularVelocityBodyServer{stream})
}

type TelemetryService_SubscribeAttitudeAngularVelocityBodyServer interface {
	Send(*AttitudeAngularVelocityBodyResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeAttitudeAngularVelocityBodyServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeAttitudeAngularVelocityBodyServer) Send(m *AttitudeAngularVelocityBodyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeCameraAttitudeQuaternion_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeCameraAttitudeQuaternionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeCameraAttitudeQuaternion(m, &telemetryServiceSubscribeCameraAttitudeQuaternionServer{stream})
}

type TelemetryService_SubscribeCameraAttitudeQuaternionServer interface {
	Send(*CameraAttitudeQuaternionResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeCameraAttitudeQuaternionServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeCameraAttitudeQuaternionServer) Send(m *CameraAttitudeQuaternionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeCameraAttitudeEuler_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeCameraAttitudeEulerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeCameraAttitudeEuler(m, &telemetryServiceSubscribeCameraAttitudeEulerServer{stream})
}

type TelemetryService_SubscribeCameraAttitudeEulerServer interface {
	Send(*CameraAttitudeEulerResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeCameraAttitudeEulerServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeCameraAttitudeEulerServer) Send(m *CameraAttitudeEulerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeVelocityNed_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeVelocityNedRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeVelocityNed(m, &telemetryServiceSubscribeVelocityNedServer{stream})
}

type TelemetryService_SubscribeVelocityNedServer interface {
	Send(*VelocityNedResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeVelocityNedServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeVelocityNedServer) Send(m *VelocityNedResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeGpsInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeGpsInfoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeGpsInfo(m, &telemetryServiceSubscribeGpsInfoServer{stream})
}

type TelemetryService_SubscribeGpsInfoServer interface {
	Send(*GpsInfoResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeGpsInfoServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeGpsInfoServer) Send(m *GpsInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeRawGps_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRawGpsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeRawGps(m, &telemetryServiceSubscribeRawGpsServer{stream})
}

type TelemetryService_SubscribeRawGpsServer interface {
	Send(*RawGpsResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeRawGpsServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeRawGpsServer) Send(m *RawGpsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeBattery_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeBatteryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeBattery(m, &telemetryServiceSubscribeBatteryServer{stream})
}

type TelemetryService_SubscribeBatteryServer interface {
	Send(*BatteryResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeBatteryServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeBatteryServer) Send(m *BatteryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeFlightMode_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeFlightModeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeFlightMode(m, &telemetryServiceSubscribeFlightModeServer{stream})
}

type TelemetryService_SubscribeFlightModeServer interface {
	Send(*FlightModeResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeFlightModeServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeFlightModeServer) Send(m *FlightModeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeHealth_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeHealthRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeHealth(m, &telemetryServiceSubscribeHealthServer{stream})
}

type TelemetryService_SubscribeHealthServer interface {
	Send(*HealthResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeHealthServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeHealthServer) Send(m *HealthResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeRcStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRcStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeRcStatus(m, &telemetryServiceSubscribeRcStatusServer{stream})
}

type TelemetryService_SubscribeRcStatusServer interface {
	Send(*RcStatusResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeRcStatusServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeRcStatusServer) Send(m *RcStatusResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeStatusText_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeStatusTextRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeStatusText(m, &telemetryServiceSubscribeStatusTextServer{stream})
}

type TelemetryService_SubscribeStatusTextServer interface {
	Send(*StatusTextResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeStatusTextServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeStatusTextServer) Send(m *StatusTextResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeActuatorControlTarget_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeActuatorControlTargetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeActuatorControlTarget(m, &telemetryServiceSubscribeActuatorControlTargetServer{stream})
}

type TelemetryService_SubscribeActuatorControlTargetServer interface {
	Send(*ActuatorControlTargetResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeActuatorControlTargetServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeActuatorControlTargetServer) Send(m *ActuatorControlTargetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeActuatorOutputStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeActuatorOutputStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeActuatorOutputStatus(m, &telemetryServiceSubscribeActuatorOutputStatusServer{stream})
}

type TelemetryService_SubscribeActuatorOutputStatusServer interface {
	Send(*ActuatorOutputStatusResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeActuatorOutputStatusServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeActuatorOutputStatusServer) Send(m *ActuatorOutputStatusResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeOdometry_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeOdometryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeOdometry(m, &telemetryServiceSubscribeOdometryServer{stream})
}

type TelemetryService_SubscribeOdometryServer interface {
	Send(*OdometryResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeOdometryServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeOdometryServer) Send(m *OdometryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribePositionVelocityNed_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribePositionVelocityNedRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribePositionVelocityNed(m, &telemetryServiceSubscribePositionVelocityNedServer{stream})
}

type TelemetryService_SubscribePositionVelocityNedServer interface {
	Send(*PositionVelocityNedResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribePositionVelocityNedServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribePositionVelocityNedServer) Send(m *PositionVelocityNedResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeGroundTruth_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeGroundTruthRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeGroundTruth(m, &telemetryServiceSubscribeGroundTruthServer{stream})
}

type TelemetryService_SubscribeGroundTruthServer interface {
	Send(*GroundTruthResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeGroundTruthServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeGroundTruthServer) Send(m *GroundTruthResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeFixedwingMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeFixedwingMetricsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeFixedwingMetrics(m, &telemetryServiceSubscribeFixedwingMetricsServer{stream})
}

type TelemetryService_SubscribeFixedwingMetricsServer interface {
	Send(*FixedwingMetricsResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeFixedwingMetricsServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeFixedwingMetricsServer) Send(m *FixedwingMetricsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeImu_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeImuRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeImu(m, &telemetryServiceSubscribeImuServer{stream})
}

type TelemetryService_SubscribeImuServer interface {
	Send(*ImuResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeImuServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeImuServer) Send(m *ImuResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeScaledImu_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeScaledImuRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeScaledImu(m, &telemetryServiceSubscribeScaledImuServer{stream})
}

type TelemetryService_SubscribeScaledImuServer interface {
	Send(*ScaledImuResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeScaledImuServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeScaledImuServer) Send(m *ScaledImuResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeRawImu_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRawImuRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeRawImu(m, &telemetryServiceSubscribeRawImuServer{stream})
}

type TelemetryService_SubscribeRawImuServer interface {
	Send(*RawImuResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeRawImuServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeRawImuServer) Send(m *RawImuResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeHealthAllOk_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeHealthAllOkRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeHealthAllOk(m, &telemetryServiceSubscribeHealthAllOkServer{stream})
}

type TelemetryService_SubscribeHealthAllOkServer interface {
	Send(*HealthAllOkResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeHealthAllOkServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeHealthAllOkServer) Send(m *HealthAllOkResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeUnixEpochTime_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeUnixEpochTimeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeUnixEpochTime(m, &telemetryServiceSubscribeUnixEpochTimeServer{stream})
}

type TelemetryService_SubscribeUnixEpochTimeServer interface {
	Send(*UnixEpochTimeResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeUnixEpochTimeServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeUnixEpochTimeServer) Send(m *UnixEpochTimeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeDistanceSensor_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeDistanceSensorRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeDistanceSensor(m, &telemetryServiceSubscribeDistanceSensorServer{stream})
}

type TelemetryService_SubscribeDistanceSensorServer interface {
	Send(*DistanceSensorResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeDistanceSensorServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeDistanceSensorServer) Send(m *DistanceSensorResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeScaledPressure_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeScaledPressureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeScaledPressure(m, &telemetryServiceSubscribeScaledPressureServer{stream})
}

type TelemetryService_SubscribeScaledPressureServer interface {
	Send(*ScaledPressureResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeScaledPressureServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeScaledPressureServer) Send(m *ScaledPressureResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SubscribeHeading_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeHeadingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeHeading(m, &telemetryServiceSubscribeHeadingServer{stream})
}

type TelemetryService_SubscribeHeadingServer interface {
	Send(*HeadingResponse) error
	grpc.ServerStream
}

type telemetryServiceSubscribeHeadingServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeHeadingServer) Send(m *HeadingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_SetRatePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRatePositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRatePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.telemetry.TelemetryService/SetRatePosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRatePosition(ctx, req.(*SetRatePositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SetRateHome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRateHomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRateHome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.telemetry.TelemetryService/SetRateHome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRateHome(ctx, req.(*SetRateHomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SetRateInAir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRateInAirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRateInAir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.telemetry.TelemetryService/SetRateInAir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRateInAir(ctx, req.(*SetRateInAirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SetRateLandedState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRateLandedStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRateLandedState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.telemetry.TelemetryService/SetRateLandedState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRateLandedState(ctx, req.(*SetRateLandedStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SetRateVtolState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRateVtolStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRateVtolState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.telemetry.TelemetryService/SetRateVtolState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRateVtolState(ctx, req.(*SetRateVtolStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SetRateAttitude_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRateAttitudeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRateAttitude(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.telemetry.TelemetryService/SetRateAttitude",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRateAttitude(ctx, req.(*SetRateAttitudeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SetRateCameraAttitude_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRateCameraAttitudeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRateCameraAttitude(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.telemetry.TelemetryService/SetRateCameraAttitude",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRateCameraAttitude(ctx, req.(*SetRateCameraAttitudeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SetRateVelocityNed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRateVelocityNedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRateVelocityNed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.telemetry.TelemetryService/SetRateVelocityNed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRateVelocityNed(ctx, req.(*SetRateVelocityNedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SetRateGpsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRateGpsInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRateGpsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.telemetry.TelemetryService/SetRateGpsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRateGpsInfo(ctx, req.(*SetRateGpsInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SetRateBattery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRateBatteryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRateBattery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.telemetry.TelemetryService/SetRateBattery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRateBattery(ctx, req.(*SetRateBatteryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SetRateRcStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRateRcStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRateRcStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.telemetry.TelemetryService/SetRateRcStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRateRcStatus(ctx, req.(*SetRateRcStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SetRateActuatorControlTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRateActuatorControlTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRateActuatorControlTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.telemetry.TelemetryService/SetRateActuatorControlTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRateActuatorControlTarget(ctx, req.(*SetRateActuatorControlTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SetRateActuatorOutputStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRateActuatorOutputStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRateActuatorOutputStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.telemetry.TelemetryService/SetRateActuatorOutputStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRateActuatorOutputStatus(ctx, req.(*SetRateActuatorOutputStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SetRateOdometry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRateOdometryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRateOdometry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.telemetry.TelemetryService/SetRateOdometry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRateOdometry(ctx, req.(*SetRateOdometryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SetRatePositionVelocityNed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRatePositionVelocityNedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRatePositionVelocityNed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.telemetry.TelemetryService/SetRatePositionVelocityNed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRatePositionVelocityNed(ctx, req.(*SetRatePositionVelocityNedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SetRateGroundTruth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRateGroundTruthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRateGroundTruth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.telemetry.TelemetryService/SetRateGroundTruth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRateGroundTruth(ctx, req.(*SetRateGroundTruthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SetRateFixedwingMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRateFixedwingMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRateFixedwingMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.telemetry.TelemetryService/SetRateFixedwingMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRateFixedwingMetrics(ctx, req.(*SetRateFixedwingMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SetRateImu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRateImuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRateImu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.telemetry.TelemetryService/SetRateImu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRateImu(ctx, req.(*SetRateImuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SetRateScaledImu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRateScaledImuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRateScaledImu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.telemetry.TelemetryService/SetRateScaledImu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRateScaledImu(ctx, req.(*SetRateScaledImuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SetRateRawImu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRateRawImuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRateRawImu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.telemetry.TelemetryService/SetRateRawImu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRateRawImu(ctx, req.(*SetRateRawImuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SetRateUnixEpochTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRateUnixEpochTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRateUnixEpochTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.telemetry.TelemetryService/SetRateUnixEpochTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRateUnixEpochTime(ctx, req.(*SetRateUnixEpochTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SetRateDistanceSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRateDistanceSensorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRateDistanceSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.telemetry.TelemetryService/SetRateDistanceSensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRateDistanceSensor(ctx, req.(*SetRateDistanceSensorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_GetGpsGlobalOrigin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGpsGlobalOriginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).GetGpsGlobalOrigin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.telemetry.TelemetryService/GetGpsGlobalOrigin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).GetGpsGlobalOrigin(ctx, req.(*GetGpsGlobalOriginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TelemetryService_ServiceDesc is the grpc.ServiceDesc for TelemetryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TelemetryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mavsdk.rpc.telemetry.TelemetryService",
	HandlerType: (*TelemetryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetRatePosition",
			Handler:    _TelemetryService_SetRatePosition_Handler,
		},
		{
			MethodName: "SetRateHome",
			Handler:    _TelemetryService_SetRateHome_Handler,
		},
		{
			MethodName: "SetRateInAir",
			Handler:    _TelemetryService_SetRateInAir_Handler,
		},
		{
			MethodName: "SetRateLandedState",
			Handler:    _TelemetryService_SetRateLandedState_Handler,
		},
		{
			MethodName: "SetRateVtolState",
			Handler:    _TelemetryService_SetRateVtolState_Handler,
		},
		{
			MethodName: "SetRateAttitude",
			Handler:    _TelemetryService_SetRateAttitude_Handler,
		},
		{
			MethodName: "SetRateCameraAttitude",
			Handler:    _TelemetryService_SetRateCameraAttitude_Handler,
		},
		{
			MethodName: "SetRateVelocityNed",
			Handler:    _TelemetryService_SetRateVelocityNed_Handler,
		},
		{
			MethodName: "SetRateGpsInfo",
			Handler:    _TelemetryService_SetRateGpsInfo_Handler,
		},
		{
			MethodName: "SetRateBattery",
			Handler:    _TelemetryService_SetRateBattery_Handler,
		},
		{
			MethodName: "SetRateRcStatus",
			Handler:    _TelemetryService_SetRateRcStatus_Handler,
		},
		{
			MethodName: "SetRateActuatorControlTarget",
			Handler:    _TelemetryService_SetRateActuatorControlTarget_Handler,
		},
		{
			MethodName: "SetRateActuatorOutputStatus",
			Handler:    _TelemetryService_SetRateActuatorOutputStatus_Handler,
		},
		{
			MethodName: "SetRateOdometry",
			Handler:    _TelemetryService_SetRateOdometry_Handler,
		},
		{
			MethodName: "SetRatePositionVelocityNed",
			Handler:    _TelemetryService_SetRatePositionVelocityNed_Handler,
		},
		{
			MethodName: "SetRateGroundTruth",
			Handler:    _TelemetryService_SetRateGroundTruth_Handler,
		},
		{
			MethodName: "SetRateFixedwingMetrics",
			Handler:    _TelemetryService_SetRateFixedwingMetrics_Handler,
		},
		{
			MethodName: "SetRateImu",
			Handler:    _TelemetryService_SetRateImu_Handler,
		},
		{
			MethodName: "SetRateScaledImu",
			Handler:    _TelemetryService_SetRateScaledImu_Handler,
		},
		{
			MethodName: "SetRateRawImu",
			Handler:    _TelemetryService_SetRateRawImu_Handler,
		},
		{
			MethodName: "SetRateUnixEpochTime",
			Handler:    _TelemetryService_SetRateUnixEpochTime_Handler,
		},
		{
			MethodName: "SetRateDistanceSensor",
			Handler:    _TelemetryService_SetRateDistanceSensor_Handler,
		},
		{
			MethodName: "GetGpsGlobalOrigin",
			Handler:    _TelemetryService_GetGpsGlobalOrigin_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribePosition",
			Handler:       _TelemetryService_SubscribePosition_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeHome",
			Handler:       _TelemetryService_SubscribeHome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeInAir",
			Handler:       _TelemetryService_SubscribeInAir_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeLandedState",
			Handler:       _TelemetryService_SubscribeLandedState_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeArmed",
			Handler:       _TelemetryService_SubscribeArmed_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeVtolState",
			Handler:       _TelemetryService_SubscribeVtolState_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeAttitudeQuaternion",
			Handler:       _TelemetryService_SubscribeAttitudeQuaternion_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeAttitudeEuler",
			Handler:       _TelemetryService_SubscribeAttitudeEuler_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeAttitudeAngularVelocityBody",
			Handler:       _TelemetryService_SubscribeAttitudeAngularVelocityBody_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeCameraAttitudeQuaternion",
			Handler:       _TelemetryService_SubscribeCameraAttitudeQuaternion_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeCameraAttitudeEuler",
			Handler:       _TelemetryService_SubscribeCameraAttitudeEuler_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeVelocityNed",
			Handler:       _TelemetryService_SubscribeVelocityNed_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeGpsInfo",
			Handler:       _TelemetryService_SubscribeGpsInfo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeRawGps",
			Handler:       _TelemetryService_SubscribeRawGps_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeBattery",
			Handler:       _TelemetryService_SubscribeBattery_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeFlightMode",
			Handler:       _TelemetryService_SubscribeFlightMode_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeHealth",
			Handler:       _TelemetryService_SubscribeHealth_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeRcStatus",
			Handler:       _TelemetryService_SubscribeRcStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeStatusText",
			Handler:       _TelemetryService_SubscribeStatusText_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeActuatorControlTarget",
			Handler:       _TelemetryService_SubscribeActuatorControlTarget_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeActuatorOutputStatus",
			Handler:       _TelemetryService_SubscribeActuatorOutputStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeOdometry",
			Handler:       _TelemetryService_SubscribeOdometry_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribePositionVelocityNed",
			Handler:       _TelemetryService_SubscribePositionVelocityNed_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeGroundTruth",
			Handler:       _TelemetryService_SubscribeGroundTruth_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeFixedwingMetrics",
			Handler:       _TelemetryService_SubscribeFixedwingMetrics_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeImu",
			Handler:       _TelemetryService_SubscribeImu_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeScaledImu",
			Handler:       _TelemetryService_SubscribeScaledImu_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeRawImu",
			Handler:       _TelemetryService_SubscribeRawImu_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeHealthAllOk",
			Handler:       _TelemetryService_SubscribeHealthAllOk_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeUnixEpochTime",
			Handler:       _TelemetryService_SubscribeUnixEpochTime_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeDistanceSensor",
			Handler:       _TelemetryService_SubscribeDistanceSensor_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeScaledPressure",
			Handler:       _TelemetryService_SubscribeScaledPressure_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeHeading",
			Handler:       _TelemetryService_SubscribeHeading_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "telemetry.proto",
}
