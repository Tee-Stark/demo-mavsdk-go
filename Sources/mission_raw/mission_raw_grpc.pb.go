// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: mission_raw.proto

package mission_raw

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MissionRawServiceClient is the client API for MissionRawService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MissionRawServiceClient interface {
	// Upload a list of raw mission items to the system.
	//
	// The raw mission items are uploaded to a drone. Once uploaded the mission
	// can be started and executed even if the connection is lost.
	UploadMission(ctx context.Context, in *UploadMissionRequest, opts ...grpc.CallOption) (*UploadMissionResponse, error)
	// Cancel an ongoing mission upload.
	CancelMissionUpload(ctx context.Context, in *CancelMissionUploadRequest, opts ...grpc.CallOption) (*CancelMissionUploadResponse, error)
	// Download a list of raw mission items from the system (asynchronous).
	DownloadMission(ctx context.Context, in *DownloadMissionRequest, opts ...grpc.CallOption) (*DownloadMissionResponse, error)
	// Cancel an ongoing mission download.
	CancelMissionDownload(ctx context.Context, in *CancelMissionDownloadRequest, opts ...grpc.CallOption) (*CancelMissionDownloadResponse, error)
	// Start the mission.
	//
	// A mission must be uploaded to the vehicle before this can be called.
	StartMission(ctx context.Context, in *StartMissionRequest, opts ...grpc.CallOption) (*StartMissionResponse, error)
	// Pause the mission.
	//
	// Pausing the mission puts the vehicle into
	// [HOLD mode](https://docs.px4.io/en/flight_modes/hold.html).
	// A multicopter should just hover at the spot while a fixedwing vehicle should loiter
	// around the location where it paused.
	PauseMission(ctx context.Context, in *PauseMissionRequest, opts ...grpc.CallOption) (*PauseMissionResponse, error)
	// Clear the mission saved on the vehicle.
	ClearMission(ctx context.Context, in *ClearMissionRequest, opts ...grpc.CallOption) (*ClearMissionResponse, error)
	// Sets the raw mission item index to go to.
	//
	// By setting the current index to 0, the mission is restarted from the beginning. If it is set
	// to a specific index of a raw mission item, the mission will be set to this item.
	SetCurrentMissionItem(ctx context.Context, in *SetCurrentMissionItemRequest, opts ...grpc.CallOption) (*SetCurrentMissionItemResponse, error)
	// Subscribe to mission progress updates.
	SubscribeMissionProgress(ctx context.Context, in *SubscribeMissionProgressRequest, opts ...grpc.CallOption) (MissionRawService_SubscribeMissionProgressClient, error)
	// *
	// Subscribes to mission changed.
	//
	// This notification can be used to be informed if a ground station has
	// been uploaded or changed by a ground station or companion computer.
	//
	// @param callback Callback to notify about change.
	SubscribeMissionChanged(ctx context.Context, in *SubscribeMissionChangedRequest, opts ...grpc.CallOption) (MissionRawService_SubscribeMissionChangedClient, error)
	// Import a QGroundControl missions in JSON .plan format.
	//
	// Supported:
	// - Waypoints
	// - Survey
	// Not supported:
	// - Structure Scan
	ImportQgroundcontrolMission(ctx context.Context, in *ImportQgroundcontrolMissionRequest, opts ...grpc.CallOption) (*ImportQgroundcontrolMissionResponse, error)
}

type missionRawServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMissionRawServiceClient(cc grpc.ClientConnInterface) MissionRawServiceClient {
	return &missionRawServiceClient{cc}
}

func (c *missionRawServiceClient) UploadMission(ctx context.Context, in *UploadMissionRequest, opts ...grpc.CallOption) (*UploadMissionResponse, error) {
	out := new(UploadMissionResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.mission_raw.MissionRawService/UploadMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionRawServiceClient) CancelMissionUpload(ctx context.Context, in *CancelMissionUploadRequest, opts ...grpc.CallOption) (*CancelMissionUploadResponse, error) {
	out := new(CancelMissionUploadResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.mission_raw.MissionRawService/CancelMissionUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionRawServiceClient) DownloadMission(ctx context.Context, in *DownloadMissionRequest, opts ...grpc.CallOption) (*DownloadMissionResponse, error) {
	out := new(DownloadMissionResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.mission_raw.MissionRawService/DownloadMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionRawServiceClient) CancelMissionDownload(ctx context.Context, in *CancelMissionDownloadRequest, opts ...grpc.CallOption) (*CancelMissionDownloadResponse, error) {
	out := new(CancelMissionDownloadResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.mission_raw.MissionRawService/CancelMissionDownload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionRawServiceClient) StartMission(ctx context.Context, in *StartMissionRequest, opts ...grpc.CallOption) (*StartMissionResponse, error) {
	out := new(StartMissionResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.mission_raw.MissionRawService/StartMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionRawServiceClient) PauseMission(ctx context.Context, in *PauseMissionRequest, opts ...grpc.CallOption) (*PauseMissionResponse, error) {
	out := new(PauseMissionResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.mission_raw.MissionRawService/PauseMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionRawServiceClient) ClearMission(ctx context.Context, in *ClearMissionRequest, opts ...grpc.CallOption) (*ClearMissionResponse, error) {
	out := new(ClearMissionResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.mission_raw.MissionRawService/ClearMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionRawServiceClient) SetCurrentMissionItem(ctx context.Context, in *SetCurrentMissionItemRequest, opts ...grpc.CallOption) (*SetCurrentMissionItemResponse, error) {
	out := new(SetCurrentMissionItemResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.mission_raw.MissionRawService/SetCurrentMissionItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionRawServiceClient) SubscribeMissionProgress(ctx context.Context, in *SubscribeMissionProgressRequest, opts ...grpc.CallOption) (MissionRawService_SubscribeMissionProgressClient, error) {
	stream, err := c.cc.NewStream(ctx, &MissionRawService_ServiceDesc.Streams[0], "/mavsdk.rpc.mission_raw.MissionRawService/SubscribeMissionProgress", opts...)
	if err != nil {
		return nil, err
	}
	x := &missionRawServiceSubscribeMissionProgressClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MissionRawService_SubscribeMissionProgressClient interface {
	Recv() (*MissionProgressResponse, error)
	grpc.ClientStream
}

type missionRawServiceSubscribeMissionProgressClient struct {
	grpc.ClientStream
}

func (x *missionRawServiceSubscribeMissionProgressClient) Recv() (*MissionProgressResponse, error) {
	m := new(MissionProgressResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *missionRawServiceClient) SubscribeMissionChanged(ctx context.Context, in *SubscribeMissionChangedRequest, opts ...grpc.CallOption) (MissionRawService_SubscribeMissionChangedClient, error) {
	stream, err := c.cc.NewStream(ctx, &MissionRawService_ServiceDesc.Streams[1], "/mavsdk.rpc.mission_raw.MissionRawService/SubscribeMissionChanged", opts...)
	if err != nil {
		return nil, err
	}
	x := &missionRawServiceSubscribeMissionChangedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MissionRawService_SubscribeMissionChangedClient interface {
	Recv() (*MissionChangedResponse, error)
	grpc.ClientStream
}

type missionRawServiceSubscribeMissionChangedClient struct {
	grpc.ClientStream
}

func (x *missionRawServiceSubscribeMissionChangedClient) Recv() (*MissionChangedResponse, error) {
	m := new(MissionChangedResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *missionRawServiceClient) ImportQgroundcontrolMission(ctx context.Context, in *ImportQgroundcontrolMissionRequest, opts ...grpc.CallOption) (*ImportQgroundcontrolMissionResponse, error) {
	out := new(ImportQgroundcontrolMissionResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.mission_raw.MissionRawService/ImportQgroundcontrolMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MissionRawServiceServer is the server API for MissionRawService service.
// All implementations must embed UnimplementedMissionRawServiceServer
// for forward compatibility
type MissionRawServiceServer interface {
	// Upload a list of raw mission items to the system.
	//
	// The raw mission items are uploaded to a drone. Once uploaded the mission
	// can be started and executed even if the connection is lost.
	UploadMission(context.Context, *UploadMissionRequest) (*UploadMissionResponse, error)
	// Cancel an ongoing mission upload.
	CancelMissionUpload(context.Context, *CancelMissionUploadRequest) (*CancelMissionUploadResponse, error)
	// Download a list of raw mission items from the system (asynchronous).
	DownloadMission(context.Context, *DownloadMissionRequest) (*DownloadMissionResponse, error)
	// Cancel an ongoing mission download.
	CancelMissionDownload(context.Context, *CancelMissionDownloadRequest) (*CancelMissionDownloadResponse, error)
	// Start the mission.
	//
	// A mission must be uploaded to the vehicle before this can be called.
	StartMission(context.Context, *StartMissionRequest) (*StartMissionResponse, error)
	// Pause the mission.
	//
	// Pausing the mission puts the vehicle into
	// [HOLD mode](https://docs.px4.io/en/flight_modes/hold.html).
	// A multicopter should just hover at the spot while a fixedwing vehicle should loiter
	// around the location where it paused.
	PauseMission(context.Context, *PauseMissionRequest) (*PauseMissionResponse, error)
	// Clear the mission saved on the vehicle.
	ClearMission(context.Context, *ClearMissionRequest) (*ClearMissionResponse, error)
	// Sets the raw mission item index to go to.
	//
	// By setting the current index to 0, the mission is restarted from the beginning. If it is set
	// to a specific index of a raw mission item, the mission will be set to this item.
	SetCurrentMissionItem(context.Context, *SetCurrentMissionItemRequest) (*SetCurrentMissionItemResponse, error)
	// Subscribe to mission progress updates.
	SubscribeMissionProgress(*SubscribeMissionProgressRequest, MissionRawService_SubscribeMissionProgressServer) error
	// *
	// Subscribes to mission changed.
	//
	// This notification can be used to be informed if a ground station has
	// been uploaded or changed by a ground station or companion computer.
	//
	// @param callback Callback to notify about change.
	SubscribeMissionChanged(*SubscribeMissionChangedRequest, MissionRawService_SubscribeMissionChangedServer) error
	// Import a QGroundControl missions in JSON .plan format.
	//
	// Supported:
	// - Waypoints
	// - Survey
	// Not supported:
	// - Structure Scan
	ImportQgroundcontrolMission(context.Context, *ImportQgroundcontrolMissionRequest) (*ImportQgroundcontrolMissionResponse, error)
	mustEmbedUnimplementedMissionRawServiceServer()
}

// UnimplementedMissionRawServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMissionRawServiceServer struct {
}

func (UnimplementedMissionRawServiceServer) UploadMission(context.Context, *UploadMissionRequest) (*UploadMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadMission not implemented")
}
func (UnimplementedMissionRawServiceServer) CancelMissionUpload(context.Context, *CancelMissionUploadRequest) (*CancelMissionUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelMissionUpload not implemented")
}
func (UnimplementedMissionRawServiceServer) DownloadMission(context.Context, *DownloadMissionRequest) (*DownloadMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadMission not implemented")
}
func (UnimplementedMissionRawServiceServer) CancelMissionDownload(context.Context, *CancelMissionDownloadRequest) (*CancelMissionDownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelMissionDownload not implemented")
}
func (UnimplementedMissionRawServiceServer) StartMission(context.Context, *StartMissionRequest) (*StartMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartMission not implemented")
}
func (UnimplementedMissionRawServiceServer) PauseMission(context.Context, *PauseMissionRequest) (*PauseMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseMission not implemented")
}
func (UnimplementedMissionRawServiceServer) ClearMission(context.Context, *ClearMissionRequest) (*ClearMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearMission not implemented")
}
func (UnimplementedMissionRawServiceServer) SetCurrentMissionItem(context.Context, *SetCurrentMissionItemRequest) (*SetCurrentMissionItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCurrentMissionItem not implemented")
}
func (UnimplementedMissionRawServiceServer) SubscribeMissionProgress(*SubscribeMissionProgressRequest, MissionRawService_SubscribeMissionProgressServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMissionProgress not implemented")
}
func (UnimplementedMissionRawServiceServer) SubscribeMissionChanged(*SubscribeMissionChangedRequest, MissionRawService_SubscribeMissionChangedServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMissionChanged not implemented")
}
func (UnimplementedMissionRawServiceServer) ImportQgroundcontrolMission(context.Context, *ImportQgroundcontrolMissionRequest) (*ImportQgroundcontrolMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportQgroundcontrolMission not implemented")
}
func (UnimplementedMissionRawServiceServer) mustEmbedUnimplementedMissionRawServiceServer() {}

// UnsafeMissionRawServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MissionRawServiceServer will
// result in compilation errors.
type UnsafeMissionRawServiceServer interface {
	mustEmbedUnimplementedMissionRawServiceServer()
}

func RegisterMissionRawServiceServer(s grpc.ServiceRegistrar, srv MissionRawServiceServer) {
	s.RegisterService(&MissionRawService_ServiceDesc, srv)
}

func _MissionRawService_UploadMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionRawServiceServer).UploadMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.mission_raw.MissionRawService/UploadMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionRawServiceServer).UploadMission(ctx, req.(*UploadMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionRawService_CancelMissionUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelMissionUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionRawServiceServer).CancelMissionUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.mission_raw.MissionRawService/CancelMissionUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionRawServiceServer).CancelMissionUpload(ctx, req.(*CancelMissionUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionRawService_DownloadMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionRawServiceServer).DownloadMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.mission_raw.MissionRawService/DownloadMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionRawServiceServer).DownloadMission(ctx, req.(*DownloadMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionRawService_CancelMissionDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelMissionDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionRawServiceServer).CancelMissionDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.mission_raw.MissionRawService/CancelMissionDownload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionRawServiceServer).CancelMissionDownload(ctx, req.(*CancelMissionDownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionRawService_StartMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionRawServiceServer).StartMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.mission_raw.MissionRawService/StartMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionRawServiceServer).StartMission(ctx, req.(*StartMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionRawService_PauseMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionRawServiceServer).PauseMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.mission_raw.MissionRawService/PauseMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionRawServiceServer).PauseMission(ctx, req.(*PauseMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionRawService_ClearMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionRawServiceServer).ClearMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.mission_raw.MissionRawService/ClearMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionRawServiceServer).ClearMission(ctx, req.(*ClearMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionRawService_SetCurrentMissionItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCurrentMissionItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionRawServiceServer).SetCurrentMissionItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.mission_raw.MissionRawService/SetCurrentMissionItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionRawServiceServer).SetCurrentMissionItem(ctx, req.(*SetCurrentMissionItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionRawService_SubscribeMissionProgress_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeMissionProgressRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MissionRawServiceServer).SubscribeMissionProgress(m, &missionRawServiceSubscribeMissionProgressServer{stream})
}

type MissionRawService_SubscribeMissionProgressServer interface {
	Send(*MissionProgressResponse) error
	grpc.ServerStream
}

type missionRawServiceSubscribeMissionProgressServer struct {
	grpc.ServerStream
}

func (x *missionRawServiceSubscribeMissionProgressServer) Send(m *MissionProgressResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MissionRawService_SubscribeMissionChanged_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeMissionChangedRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MissionRawServiceServer).SubscribeMissionChanged(m, &missionRawServiceSubscribeMissionChangedServer{stream})
}

type MissionRawService_SubscribeMissionChangedServer interface {
	Send(*MissionChangedResponse) error
	grpc.ServerStream
}

type missionRawServiceSubscribeMissionChangedServer struct {
	grpc.ServerStream
}

func (x *missionRawServiceSubscribeMissionChangedServer) Send(m *MissionChangedResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MissionRawService_ImportQgroundcontrolMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportQgroundcontrolMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionRawServiceServer).ImportQgroundcontrolMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.mission_raw.MissionRawService/ImportQgroundcontrolMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionRawServiceServer).ImportQgroundcontrolMission(ctx, req.(*ImportQgroundcontrolMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MissionRawService_ServiceDesc is the grpc.ServiceDesc for MissionRawService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MissionRawService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mavsdk.rpc.mission_raw.MissionRawService",
	HandlerType: (*MissionRawServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadMission",
			Handler:    _MissionRawService_UploadMission_Handler,
		},
		{
			MethodName: "CancelMissionUpload",
			Handler:    _MissionRawService_CancelMissionUpload_Handler,
		},
		{
			MethodName: "DownloadMission",
			Handler:    _MissionRawService_DownloadMission_Handler,
		},
		{
			MethodName: "CancelMissionDownload",
			Handler:    _MissionRawService_CancelMissionDownload_Handler,
		},
		{
			MethodName: "StartMission",
			Handler:    _MissionRawService_StartMission_Handler,
		},
		{
			MethodName: "PauseMission",
			Handler:    _MissionRawService_PauseMission_Handler,
		},
		{
			MethodName: "ClearMission",
			Handler:    _MissionRawService_ClearMission_Handler,
		},
		{
			MethodName: "SetCurrentMissionItem",
			Handler:    _MissionRawService_SetCurrentMissionItem_Handler,
		},
		{
			MethodName: "ImportQgroundcontrolMission",
			Handler:    _MissionRawService_ImportQgroundcontrolMission_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeMissionProgress",
			Handler:       _MissionRawService_SubscribeMissionProgress_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMissionChanged",
			Handler:       _MissionRawService_SubscribeMissionChanged_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mission_raw.proto",
}
