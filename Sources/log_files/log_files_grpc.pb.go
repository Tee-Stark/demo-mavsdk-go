// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: log_files.proto

package log_files

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogFilesServiceClient is the client API for LogFilesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogFilesServiceClient interface {
	// Get List of log files.
	GetEntries(ctx context.Context, in *GetEntriesRequest, opts ...grpc.CallOption) (*GetEntriesResponse, error)
	// Download log file.
	SubscribeDownloadLogFile(ctx context.Context, in *SubscribeDownloadLogFileRequest, opts ...grpc.CallOption) (LogFilesService_SubscribeDownloadLogFileClient, error)
	// Download log file synchronously.
	DownloadLogFile(ctx context.Context, in *DownloadLogFileRequest, opts ...grpc.CallOption) (*DownloadLogFileResponse, error)
	// Erase all log files.
	EraseAllLogFiles(ctx context.Context, in *EraseAllLogFilesRequest, opts ...grpc.CallOption) (*EraseAllLogFilesResponse, error)
}

type logFilesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogFilesServiceClient(cc grpc.ClientConnInterface) LogFilesServiceClient {
	return &logFilesServiceClient{cc}
}

func (c *logFilesServiceClient) GetEntries(ctx context.Context, in *GetEntriesRequest, opts ...grpc.CallOption) (*GetEntriesResponse, error) {
	out := new(GetEntriesResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.log_files.LogFilesService/GetEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logFilesServiceClient) SubscribeDownloadLogFile(ctx context.Context, in *SubscribeDownloadLogFileRequest, opts ...grpc.CallOption) (LogFilesService_SubscribeDownloadLogFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &LogFilesService_ServiceDesc.Streams[0], "/mavsdk.rpc.log_files.LogFilesService/SubscribeDownloadLogFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &logFilesServiceSubscribeDownloadLogFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LogFilesService_SubscribeDownloadLogFileClient interface {
	Recv() (*DownloadLogFileResponse, error)
	grpc.ClientStream
}

type logFilesServiceSubscribeDownloadLogFileClient struct {
	grpc.ClientStream
}

func (x *logFilesServiceSubscribeDownloadLogFileClient) Recv() (*DownloadLogFileResponse, error) {
	m := new(DownloadLogFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *logFilesServiceClient) DownloadLogFile(ctx context.Context, in *DownloadLogFileRequest, opts ...grpc.CallOption) (*DownloadLogFileResponse, error) {
	out := new(DownloadLogFileResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.log_files.LogFilesService/DownloadLogFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logFilesServiceClient) EraseAllLogFiles(ctx context.Context, in *EraseAllLogFilesRequest, opts ...grpc.CallOption) (*EraseAllLogFilesResponse, error) {
	out := new(EraseAllLogFilesResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.log_files.LogFilesService/EraseAllLogFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogFilesServiceServer is the server API for LogFilesService service.
// All implementations must embed UnimplementedLogFilesServiceServer
// for forward compatibility
type LogFilesServiceServer interface {
	// Get List of log files.
	GetEntries(context.Context, *GetEntriesRequest) (*GetEntriesResponse, error)
	// Download log file.
	SubscribeDownloadLogFile(*SubscribeDownloadLogFileRequest, LogFilesService_SubscribeDownloadLogFileServer) error
	// Download log file synchronously.
	DownloadLogFile(context.Context, *DownloadLogFileRequest) (*DownloadLogFileResponse, error)
	// Erase all log files.
	EraseAllLogFiles(context.Context, *EraseAllLogFilesRequest) (*EraseAllLogFilesResponse, error)
	mustEmbedUnimplementedLogFilesServiceServer()
}

// UnimplementedLogFilesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLogFilesServiceServer struct {
}

func (UnimplementedLogFilesServiceServer) GetEntries(context.Context, *GetEntriesRequest) (*GetEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntries not implemented")
}
func (UnimplementedLogFilesServiceServer) SubscribeDownloadLogFile(*SubscribeDownloadLogFileRequest, LogFilesService_SubscribeDownloadLogFileServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeDownloadLogFile not implemented")
}
func (UnimplementedLogFilesServiceServer) DownloadLogFile(context.Context, *DownloadLogFileRequest) (*DownloadLogFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadLogFile not implemented")
}
func (UnimplementedLogFilesServiceServer) EraseAllLogFiles(context.Context, *EraseAllLogFilesRequest) (*EraseAllLogFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EraseAllLogFiles not implemented")
}
func (UnimplementedLogFilesServiceServer) mustEmbedUnimplementedLogFilesServiceServer() {}

// UnsafeLogFilesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogFilesServiceServer will
// result in compilation errors.
type UnsafeLogFilesServiceServer interface {
	mustEmbedUnimplementedLogFilesServiceServer()
}

func RegisterLogFilesServiceServer(s grpc.ServiceRegistrar, srv LogFilesServiceServer) {
	s.RegisterService(&LogFilesService_ServiceDesc, srv)
}

func _LogFilesService_GetEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogFilesServiceServer).GetEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.log_files.LogFilesService/GetEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogFilesServiceServer).GetEntries(ctx, req.(*GetEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogFilesService_SubscribeDownloadLogFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeDownloadLogFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogFilesServiceServer).SubscribeDownloadLogFile(m, &logFilesServiceSubscribeDownloadLogFileServer{stream})
}

type LogFilesService_SubscribeDownloadLogFileServer interface {
	Send(*DownloadLogFileResponse) error
	grpc.ServerStream
}

type logFilesServiceSubscribeDownloadLogFileServer struct {
	grpc.ServerStream
}

func (x *logFilesServiceSubscribeDownloadLogFileServer) Send(m *DownloadLogFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _LogFilesService_DownloadLogFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadLogFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogFilesServiceServer).DownloadLogFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.log_files.LogFilesService/DownloadLogFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogFilesServiceServer).DownloadLogFile(ctx, req.(*DownloadLogFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogFilesService_EraseAllLogFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EraseAllLogFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogFilesServiceServer).EraseAllLogFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.log_files.LogFilesService/EraseAllLogFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogFilesServiceServer).EraseAllLogFiles(ctx, req.(*EraseAllLogFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LogFilesService_ServiceDesc is the grpc.ServiceDesc for LogFilesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogFilesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mavsdk.rpc.log_files.LogFilesService",
	HandlerType: (*LogFilesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEntries",
			Handler:    _LogFilesService_GetEntries_Handler,
		},
		{
			MethodName: "DownloadLogFile",
			Handler:    _LogFilesService_DownloadLogFile_Handler,
		},
		{
			MethodName: "EraseAllLogFiles",
			Handler:    _LogFilesService_EraseAllLogFiles_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeDownloadLogFile",
			Handler:       _LogFilesService_SubscribeDownloadLogFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "log_files.proto",
}
