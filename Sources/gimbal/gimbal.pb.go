// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: gimbal.proto

package gimbal

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Gimbal mode type.
type GimbalMode int32

const (
	GimbalMode_GIMBAL_MODE_YAW_FOLLOW GimbalMode = 0 // Yaw follow will point the gimbal to the vehicle heading
	GimbalMode_GIMBAL_MODE_YAW_LOCK   GimbalMode = 1 // Yaw lock will fix the gimbal poiting to an absolute direction
)

// Enum value maps for GimbalMode.
var (
	GimbalMode_name = map[int32]string{
		0: "GIMBAL_MODE_YAW_FOLLOW",
		1: "GIMBAL_MODE_YAW_LOCK",
	}
	GimbalMode_value = map[string]int32{
		"GIMBAL_MODE_YAW_FOLLOW": 0,
		"GIMBAL_MODE_YAW_LOCK":   1,
	}
)

func (x GimbalMode) Enum() *GimbalMode {
	p := new(GimbalMode)
	*p = x
	return p
}

func (x GimbalMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GimbalMode) Descriptor() protoreflect.EnumDescriptor {
	return file_gimbal_proto_enumTypes[0].Descriptor()
}

func (GimbalMode) Type() protoreflect.EnumType {
	return &file_gimbal_proto_enumTypes[0]
}

func (x GimbalMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GimbalMode.Descriptor instead.
func (GimbalMode) EnumDescriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{0}
}

// Control mode
type ControlMode int32

const (
	ControlMode_CONTROL_MODE_NONE      ControlMode = 0 // Indicates that the component does not have control over the gimbal
	ControlMode_CONTROL_MODE_PRIMARY   ControlMode = 1 // To take primary control over the gimbal
	ControlMode_CONTROL_MODE_SECONDARY ControlMode = 2 // To take secondary control over the gimbal
)

// Enum value maps for ControlMode.
var (
	ControlMode_name = map[int32]string{
		0: "CONTROL_MODE_NONE",
		1: "CONTROL_MODE_PRIMARY",
		2: "CONTROL_MODE_SECONDARY",
	}
	ControlMode_value = map[string]int32{
		"CONTROL_MODE_NONE":      0,
		"CONTROL_MODE_PRIMARY":   1,
		"CONTROL_MODE_SECONDARY": 2,
	}
)

func (x ControlMode) Enum() *ControlMode {
	p := new(ControlMode)
	*p = x
	return p
}

func (x ControlMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ControlMode) Descriptor() protoreflect.EnumDescriptor {
	return file_gimbal_proto_enumTypes[1].Descriptor()
}

func (ControlMode) Type() protoreflect.EnumType {
	return &file_gimbal_proto_enumTypes[1]
}

func (x ControlMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ControlMode.Descriptor instead.
func (ControlMode) EnumDescriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{1}
}

// Possible results returned for gimbal commands.
type GimbalResult_Result int32

const (
	GimbalResult_RESULT_UNKNOWN     GimbalResult_Result = 0 // Unknown result
	GimbalResult_RESULT_SUCCESS     GimbalResult_Result = 1 // Command was accepted
	GimbalResult_RESULT_ERROR       GimbalResult_Result = 2 // Error occurred sending the command
	GimbalResult_RESULT_TIMEOUT     GimbalResult_Result = 3 // Command timed out
	GimbalResult_RESULT_UNSUPPORTED GimbalResult_Result = 4 // Functionality not supported
	GimbalResult_RESULT_NO_SYSTEM   GimbalResult_Result = 5 // No system connected
)

// Enum value maps for GimbalResult_Result.
var (
	GimbalResult_Result_name = map[int32]string{
		0: "RESULT_UNKNOWN",
		1: "RESULT_SUCCESS",
		2: "RESULT_ERROR",
		3: "RESULT_TIMEOUT",
		4: "RESULT_UNSUPPORTED",
		5: "RESULT_NO_SYSTEM",
	}
	GimbalResult_Result_value = map[string]int32{
		"RESULT_UNKNOWN":     0,
		"RESULT_SUCCESS":     1,
		"RESULT_ERROR":       2,
		"RESULT_TIMEOUT":     3,
		"RESULT_UNSUPPORTED": 4,
		"RESULT_NO_SYSTEM":   5,
	}
)

func (x GimbalResult_Result) Enum() *GimbalResult_Result {
	p := new(GimbalResult_Result)
	*p = x
	return p
}

func (x GimbalResult_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GimbalResult_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_gimbal_proto_enumTypes[2].Descriptor()
}

func (GimbalResult_Result) Type() protoreflect.EnumType {
	return &file_gimbal_proto_enumTypes[2]
}

func (x GimbalResult_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GimbalResult_Result.Descriptor instead.
func (GimbalResult_Result) EnumDescriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{15, 0}
}

type SetPitchAndYawRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PitchDeg float32 `protobuf:"fixed32,1,opt,name=pitch_deg,json=pitchDeg,proto3" json:"pitch_deg,omitempty"` // Pitch angle in degrees (negative points down)
	YawDeg   float32 `protobuf:"fixed32,2,opt,name=yaw_deg,json=yawDeg,proto3" json:"yaw_deg,omitempty"`       // Yaw angle in degrees (positive is clock-wise, range: -180 to 180 or 0 to 360)
}

func (x *SetPitchAndYawRequest) Reset() {
	*x = SetPitchAndYawRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gimbal_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPitchAndYawRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPitchAndYawRequest) ProtoMessage() {}

func (x *SetPitchAndYawRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gimbal_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPitchAndYawRequest.ProtoReflect.Descriptor instead.
func (*SetPitchAndYawRequest) Descriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{0}
}

func (x *SetPitchAndYawRequest) GetPitchDeg() float32 {
	if x != nil {
		return x.PitchDeg
	}
	return 0
}

func (x *SetPitchAndYawRequest) GetYawDeg() float32 {
	if x != nil {
		return x.YawDeg
	}
	return 0
}

type SetPitchAndYawResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GimbalResult *GimbalResult `protobuf:"bytes,1,opt,name=gimbal_result,json=gimbalResult,proto3" json:"gimbal_result,omitempty"`
}

func (x *SetPitchAndYawResponse) Reset() {
	*x = SetPitchAndYawResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gimbal_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPitchAndYawResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPitchAndYawResponse) ProtoMessage() {}

func (x *SetPitchAndYawResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gimbal_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPitchAndYawResponse.ProtoReflect.Descriptor instead.
func (*SetPitchAndYawResponse) Descriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{1}
}

func (x *SetPitchAndYawResponse) GetGimbalResult() *GimbalResult {
	if x != nil {
		return x.GimbalResult
	}
	return nil
}

type SetPitchRateAndYawRateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PitchRateDegS float32 `protobuf:"fixed32,1,opt,name=pitch_rate_deg_s,json=pitchRateDegS,proto3" json:"pitch_rate_deg_s,omitempty"` // Angular rate around pitch axis in degrees/second (negative downward)
	YawRateDegS   float32 `protobuf:"fixed32,2,opt,name=yaw_rate_deg_s,json=yawRateDegS,proto3" json:"yaw_rate_deg_s,omitempty"`       // Angular rate around yaw axis in degrees/second (positive is clock-wise)
}

func (x *SetPitchRateAndYawRateRequest) Reset() {
	*x = SetPitchRateAndYawRateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gimbal_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPitchRateAndYawRateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPitchRateAndYawRateRequest) ProtoMessage() {}

func (x *SetPitchRateAndYawRateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gimbal_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPitchRateAndYawRateRequest.ProtoReflect.Descriptor instead.
func (*SetPitchRateAndYawRateRequest) Descriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{2}
}

func (x *SetPitchRateAndYawRateRequest) GetPitchRateDegS() float32 {
	if x != nil {
		return x.PitchRateDegS
	}
	return 0
}

func (x *SetPitchRateAndYawRateRequest) GetYawRateDegS() float32 {
	if x != nil {
		return x.YawRateDegS
	}
	return 0
}

type SetPitchRateAndYawRateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GimbalResult *GimbalResult `protobuf:"bytes,1,opt,name=gimbal_result,json=gimbalResult,proto3" json:"gimbal_result,omitempty"`
}

func (x *SetPitchRateAndYawRateResponse) Reset() {
	*x = SetPitchRateAndYawRateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gimbal_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPitchRateAndYawRateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPitchRateAndYawRateResponse) ProtoMessage() {}

func (x *SetPitchRateAndYawRateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gimbal_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPitchRateAndYawRateResponse.ProtoReflect.Descriptor instead.
func (*SetPitchRateAndYawRateResponse) Descriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{3}
}

func (x *SetPitchRateAndYawRateResponse) GetGimbalResult() *GimbalResult {
	if x != nil {
		return x.GimbalResult
	}
	return nil
}

type SetModeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GimbalMode GimbalMode `protobuf:"varint,1,opt,name=gimbal_mode,json=gimbalMode,proto3,enum=mavsdk.rpc.gimbal.GimbalMode" json:"gimbal_mode,omitempty"` // The mode to be set.
}

func (x *SetModeRequest) Reset() {
	*x = SetModeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gimbal_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetModeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetModeRequest) ProtoMessage() {}

func (x *SetModeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gimbal_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetModeRequest.ProtoReflect.Descriptor instead.
func (*SetModeRequest) Descriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{4}
}

func (x *SetModeRequest) GetGimbalMode() GimbalMode {
	if x != nil {
		return x.GimbalMode
	}
	return GimbalMode_GIMBAL_MODE_YAW_FOLLOW
}

type SetModeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GimbalResult *GimbalResult `protobuf:"bytes,1,opt,name=gimbal_result,json=gimbalResult,proto3" json:"gimbal_result,omitempty"`
}

func (x *SetModeResponse) Reset() {
	*x = SetModeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gimbal_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetModeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetModeResponse) ProtoMessage() {}

func (x *SetModeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gimbal_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetModeResponse.ProtoReflect.Descriptor instead.
func (*SetModeResponse) Descriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{5}
}

func (x *SetModeResponse) GetGimbalResult() *GimbalResult {
	if x != nil {
		return x.GimbalResult
	}
	return nil
}

type SetRoiLocationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LatitudeDeg  float64 `protobuf:"fixed64,1,opt,name=latitude_deg,json=latitudeDeg,proto3" json:"latitude_deg,omitempty"`    // Latitude in degrees
	LongitudeDeg float64 `protobuf:"fixed64,2,opt,name=longitude_deg,json=longitudeDeg,proto3" json:"longitude_deg,omitempty"` // Longitude in degrees
	AltitudeM    float32 `protobuf:"fixed32,3,opt,name=altitude_m,json=altitudeM,proto3" json:"altitude_m,omitempty"`          // Altitude in metres (AMSL)
}

func (x *SetRoiLocationRequest) Reset() {
	*x = SetRoiLocationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gimbal_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRoiLocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRoiLocationRequest) ProtoMessage() {}

func (x *SetRoiLocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gimbal_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRoiLocationRequest.ProtoReflect.Descriptor instead.
func (*SetRoiLocationRequest) Descriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{6}
}

func (x *SetRoiLocationRequest) GetLatitudeDeg() float64 {
	if x != nil {
		return x.LatitudeDeg
	}
	return 0
}

func (x *SetRoiLocationRequest) GetLongitudeDeg() float64 {
	if x != nil {
		return x.LongitudeDeg
	}
	return 0
}

func (x *SetRoiLocationRequest) GetAltitudeM() float32 {
	if x != nil {
		return x.AltitudeM
	}
	return 0
}

type SetRoiLocationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GimbalResult *GimbalResult `protobuf:"bytes,1,opt,name=gimbal_result,json=gimbalResult,proto3" json:"gimbal_result,omitempty"`
}

func (x *SetRoiLocationResponse) Reset() {
	*x = SetRoiLocationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gimbal_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRoiLocationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRoiLocationResponse) ProtoMessage() {}

func (x *SetRoiLocationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gimbal_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRoiLocationResponse.ProtoReflect.Descriptor instead.
func (*SetRoiLocationResponse) Descriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{7}
}

func (x *SetRoiLocationResponse) GetGimbalResult() *GimbalResult {
	if x != nil {
		return x.GimbalResult
	}
	return nil
}

type TakeControlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControlMode ControlMode `protobuf:"varint,1,opt,name=control_mode,json=controlMode,proto3,enum=mavsdk.rpc.gimbal.ControlMode" json:"control_mode,omitempty"` // Control mode (primary or secondary)
}

func (x *TakeControlRequest) Reset() {
	*x = TakeControlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gimbal_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakeControlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeControlRequest) ProtoMessage() {}

func (x *TakeControlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gimbal_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeControlRequest.ProtoReflect.Descriptor instead.
func (*TakeControlRequest) Descriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{8}
}

func (x *TakeControlRequest) GetControlMode() ControlMode {
	if x != nil {
		return x.ControlMode
	}
	return ControlMode_CONTROL_MODE_NONE
}

type TakeControlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GimbalResult *GimbalResult `protobuf:"bytes,1,opt,name=gimbal_result,json=gimbalResult,proto3" json:"gimbal_result,omitempty"`
}

func (x *TakeControlResponse) Reset() {
	*x = TakeControlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gimbal_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakeControlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeControlResponse) ProtoMessage() {}

func (x *TakeControlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gimbal_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeControlResponse.ProtoReflect.Descriptor instead.
func (*TakeControlResponse) Descriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{9}
}

func (x *TakeControlResponse) GetGimbalResult() *GimbalResult {
	if x != nil {
		return x.GimbalResult
	}
	return nil
}

type ReleaseControlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReleaseControlRequest) Reset() {
	*x = ReleaseControlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gimbal_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseControlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseControlRequest) ProtoMessage() {}

func (x *ReleaseControlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gimbal_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseControlRequest.ProtoReflect.Descriptor instead.
func (*ReleaseControlRequest) Descriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{10}
}

type ReleaseControlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GimbalResult *GimbalResult `protobuf:"bytes,1,opt,name=gimbal_result,json=gimbalResult,proto3" json:"gimbal_result,omitempty"`
}

func (x *ReleaseControlResponse) Reset() {
	*x = ReleaseControlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gimbal_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseControlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseControlResponse) ProtoMessage() {}

func (x *ReleaseControlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gimbal_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseControlResponse.ProtoReflect.Descriptor instead.
func (*ReleaseControlResponse) Descriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{11}
}

func (x *ReleaseControlResponse) GetGimbalResult() *GimbalResult {
	if x != nil {
		return x.GimbalResult
	}
	return nil
}

type SubscribeControlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeControlRequest) Reset() {
	*x = SubscribeControlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gimbal_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeControlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeControlRequest) ProtoMessage() {}

func (x *SubscribeControlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gimbal_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeControlRequest.ProtoReflect.Descriptor instead.
func (*SubscribeControlRequest) Descriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{12}
}

type ControlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControlStatus *ControlStatus `protobuf:"bytes,1,opt,name=control_status,json=controlStatus,proto3" json:"control_status,omitempty"` // Control status
}

func (x *ControlResponse) Reset() {
	*x = ControlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gimbal_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlResponse) ProtoMessage() {}

func (x *ControlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gimbal_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlResponse.ProtoReflect.Descriptor instead.
func (*ControlResponse) Descriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{13}
}

func (x *ControlResponse) GetControlStatus() *ControlStatus {
	if x != nil {
		return x.ControlStatus
	}
	return nil
}

// Control status
type ControlStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControlMode            ControlMode `protobuf:"varint,1,opt,name=control_mode,json=controlMode,proto3,enum=mavsdk.rpc.gimbal.ControlMode" json:"control_mode,omitempty"` // Control mode (none, primary or secondary)
	SysidPrimaryControl    int32       `protobuf:"varint,2,opt,name=sysid_primary_control,json=sysidPrimaryControl,proto3" json:"sysid_primary_control,omitempty"`          // Sysid of the component that has primary control over the gimbal (0 if no one is in control)
	CompidPrimaryControl   int32       `protobuf:"varint,3,opt,name=compid_primary_control,json=compidPrimaryControl,proto3" json:"compid_primary_control,omitempty"`       // Compid of the component that has primary control over the gimbal (0 if no one is in control)
	SysidSecondaryControl  int32       `protobuf:"varint,4,opt,name=sysid_secondary_control,json=sysidSecondaryControl,proto3" json:"sysid_secondary_control,omitempty"`    // Sysid of the component that has secondary control over the gimbal (0 if no one is in control)
	CompidSecondaryControl int32       `protobuf:"varint,5,opt,name=compid_secondary_control,json=compidSecondaryControl,proto3" json:"compid_secondary_control,omitempty"` // Compid of the component that has secondary control over the gimbal (0 if no one is in control)
}

func (x *ControlStatus) Reset() {
	*x = ControlStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gimbal_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlStatus) ProtoMessage() {}

func (x *ControlStatus) ProtoReflect() protoreflect.Message {
	mi := &file_gimbal_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlStatus.ProtoReflect.Descriptor instead.
func (*ControlStatus) Descriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{14}
}

func (x *ControlStatus) GetControlMode() ControlMode {
	if x != nil {
		return x.ControlMode
	}
	return ControlMode_CONTROL_MODE_NONE
}

func (x *ControlStatus) GetSysidPrimaryControl() int32 {
	if x != nil {
		return x.SysidPrimaryControl
	}
	return 0
}

func (x *ControlStatus) GetCompidPrimaryControl() int32 {
	if x != nil {
		return x.CompidPrimaryControl
	}
	return 0
}

func (x *ControlStatus) GetSysidSecondaryControl() int32 {
	if x != nil {
		return x.SysidSecondaryControl
	}
	return 0
}

func (x *ControlStatus) GetCompidSecondaryControl() int32 {
	if x != nil {
		return x.CompidSecondaryControl
	}
	return 0
}

// Result type.
type GimbalResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    GimbalResult_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mavsdk.rpc.gimbal.GimbalResult_Result" json:"result,omitempty"` // Result enum value
	ResultStr string              `protobuf:"bytes,2,opt,name=result_str,json=resultStr,proto3" json:"result_str,omitempty"`                      // Human-readable English string describing the result
}

func (x *GimbalResult) Reset() {
	*x = GimbalResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gimbal_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GimbalResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GimbalResult) ProtoMessage() {}

func (x *GimbalResult) ProtoReflect() protoreflect.Message {
	mi := &file_gimbal_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GimbalResult.ProtoReflect.Descriptor instead.
func (*GimbalResult) Descriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{15}
}

func (x *GimbalResult) GetResult() GimbalResult_Result {
	if x != nil {
		return x.Result
	}
	return GimbalResult_RESULT_UNKNOWN
}

func (x *GimbalResult) GetResultStr() string {
	if x != nil {
		return x.ResultStr
	}
	return ""
}

var File_gimbal_proto protoreflect.FileDescriptor

var file_gimbal_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x67, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11,
	0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x67, 0x69, 0x6d, 0x62, 0x61,
	0x6c, 0x22, 0x4d, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x50, 0x69, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x64,
	0x59, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x69,
	0x74, 0x63, 0x68, 0x5f, 0x64, 0x65, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x70,
	0x69, 0x74, 0x63, 0x68, 0x44, 0x65, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x79, 0x61, 0x77, 0x5f, 0x64,
	0x65, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x79, 0x61, 0x77, 0x44, 0x65, 0x67,
	0x22, 0x5e, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x50, 0x69, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x64, 0x59,
	0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x67, 0x69,
	0x6d, 0x62, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x67,
	0x69, 0x6d, 0x62, 0x61, 0x6c, 0x2e, 0x47, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x0c, 0x67, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x6d, 0x0a, 0x1d, 0x53, 0x65, 0x74, 0x50, 0x69, 0x74, 0x63, 0x68, 0x52, 0x61, 0x74, 0x65,
	0x41, 0x6e, 0x64, 0x59, 0x61, 0x77, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x27, 0x0a, 0x10, 0x70, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x64, 0x65, 0x67, 0x5f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x70, 0x69, 0x74,
	0x63, 0x68, 0x52, 0x61, 0x74, 0x65, 0x44, 0x65, 0x67, 0x53, 0x12, 0x23, 0x0a, 0x0e, 0x79, 0x61,
	0x77, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x67, 0x5f, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0b, 0x79, 0x61, 0x77, 0x52, 0x61, 0x74, 0x65, 0x44, 0x65, 0x67, 0x53, 0x22,
	0x66, 0x0a, 0x1e, 0x53, 0x65, 0x74, 0x50, 0x69, 0x74, 0x63, 0x68, 0x52, 0x61, 0x74, 0x65, 0x41,
	0x6e, 0x64, 0x59, 0x61, 0x77, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x44, 0x0a, 0x0d, 0x67, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64,
	0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x67, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x2e, 0x47, 0x69, 0x6d,
	0x62, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x67, 0x69, 0x6d, 0x62, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x50, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x67, 0x69, 0x6d,
	0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x67, 0x69, 0x6d, 0x62,
	0x61, 0x6c, 0x2e, 0x47, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x67,
	0x69, 0x6d, 0x62, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x57, 0x0a, 0x0f, 0x53, 0x65, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d,
	0x67, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x67, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x2e, 0x47, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x67, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x7e, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x69, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x44, 0x65, 0x67, 0x12, 0x23,
	0x0a, 0x0d, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x44, 0x65, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x4d, 0x22, 0x5e, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x69, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d,
	0x67, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x67, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x2e, 0x47, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x67, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x57, 0x0a, 0x12, 0x54, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x67, 0x69, 0x6d, 0x62,
	0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x5b, 0x0a, 0x13, 0x54,
	0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x67, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x76, 0x73,
	0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x67, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x2e, 0x47, 0x69,
	0x6d, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x67, 0x69, 0x6d, 0x62,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x17, 0x0a, 0x15, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x5e, 0x0a, 0x16, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x67,
	0x69, 0x6d, 0x62, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x67, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x2e, 0x47, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x0c, 0x67, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x19, 0x0a, 0x17, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5a, 0x0a, 0x0f,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x47, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x67, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xae, 0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x67, 0x69,
	0x6d, 0x62, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a,
	0x15, 0x73, 0x79, 0x73, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x73, 0x79,
	0x73, 0x69, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x79, 0x73, 0x69, 0x64,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x73, 0x79, 0x73, 0x69, 0x64, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12,
	0x38, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x22, 0xf4, 0x01, 0x0a, 0x0c, 0x47, 0x69,
	0x6d, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6d, 0x61, 0x76,
	0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x67, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x2e, 0x47,
	0x69, 0x6d, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x72, 0x22, 0x84, 0x01, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x12,
	0x0a, 0x0e, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54,
	0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x55, 0x4e, 0x53,
	0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x05,
	0x2a, 0x42, 0x0a, 0x0a, 0x47, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x16, 0x47, 0x49, 0x4d, 0x42, 0x41, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x59, 0x41,
	0x57, 0x5f, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x49,
	0x4d, 0x42, 0x41, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x59, 0x41, 0x57, 0x5f, 0x4c, 0x4f,
	0x43, 0x4b, 0x10, 0x01, 0x2a, 0x5a, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f,
	0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41,
	0x52, 0x59, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x10, 0x02,
	0x32, 0xe7, 0x05, 0x0a, 0x0d, 0x47, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x67, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x50, 0x69, 0x74, 0x63, 0x68, 0x41, 0x6e,
	0x64, 0x59, 0x61, 0x77, 0x12, 0x28, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x67, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x69, 0x74, 0x63,
	0x68, 0x41, 0x6e, 0x64, 0x59, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x67, 0x69, 0x6d, 0x62,
	0x61, 0x6c, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x69, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x64, 0x59, 0x61,
	0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x16, 0x53,
	0x65, 0x74, 0x50, 0x69, 0x74, 0x63, 0x68, 0x52, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x59, 0x61,
	0x77, 0x52, 0x61, 0x74, 0x65, 0x12, 0x30, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x67, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x69, 0x74,
	0x63, 0x68, 0x52, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x59, 0x61, 0x77, 0x52, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x67, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x2e, 0x53, 0x65, 0x74, 0x50,
	0x69, 0x74, 0x63, 0x68, 0x52, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x59, 0x61, 0x77, 0x52, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x07,
	0x53, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x67, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x2e, 0x53, 0x65, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d, 0x61, 0x76,
	0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x67, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x2e, 0x53,
	0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x67, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x69, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x67, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x69, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d,
	0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x67, 0x69, 0x6d, 0x62, 0x61, 0x6c,
	0x2e, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x69, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0b, 0x54, 0x61, 0x6b,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x25, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64,
	0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x67, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x2e, 0x54, 0x61, 0x6b,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x67, 0x69, 0x6d,
	0x62, 0x61, 0x6c, 0x2e, 0x54, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x0e, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x28, 0x2e, 0x6d, 0x61,
	0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x67, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x2e,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x67, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x66, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x2a, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x67, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x67, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x17, 0x42, 0x0b, 0x47, 0x69,
	0x6d, 0x62, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x08, 0x2e, 0x3b, 0x67, 0x69, 0x6d,
	0x62, 0x61, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gimbal_proto_rawDescOnce sync.Once
	file_gimbal_proto_rawDescData = file_gimbal_proto_rawDesc
)

func file_gimbal_proto_rawDescGZIP() []byte {
	file_gimbal_proto_rawDescOnce.Do(func() {
		file_gimbal_proto_rawDescData = protoimpl.X.CompressGZIP(file_gimbal_proto_rawDescData)
	})
	return file_gimbal_proto_rawDescData
}

var file_gimbal_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_gimbal_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_gimbal_proto_goTypes = []interface{}{
	(GimbalMode)(0),                        // 0: mavsdk.rpc.gimbal.GimbalMode
	(ControlMode)(0),                       // 1: mavsdk.rpc.gimbal.ControlMode
	(GimbalResult_Result)(0),               // 2: mavsdk.rpc.gimbal.GimbalResult.Result
	(*SetPitchAndYawRequest)(nil),          // 3: mavsdk.rpc.gimbal.SetPitchAndYawRequest
	(*SetPitchAndYawResponse)(nil),         // 4: mavsdk.rpc.gimbal.SetPitchAndYawResponse
	(*SetPitchRateAndYawRateRequest)(nil),  // 5: mavsdk.rpc.gimbal.SetPitchRateAndYawRateRequest
	(*SetPitchRateAndYawRateResponse)(nil), // 6: mavsdk.rpc.gimbal.SetPitchRateAndYawRateResponse
	(*SetModeRequest)(nil),                 // 7: mavsdk.rpc.gimbal.SetModeRequest
	(*SetModeResponse)(nil),                // 8: mavsdk.rpc.gimbal.SetModeResponse
	(*SetRoiLocationRequest)(nil),          // 9: mavsdk.rpc.gimbal.SetRoiLocationRequest
	(*SetRoiLocationResponse)(nil),         // 10: mavsdk.rpc.gimbal.SetRoiLocationResponse
	(*TakeControlRequest)(nil),             // 11: mavsdk.rpc.gimbal.TakeControlRequest
	(*TakeControlResponse)(nil),            // 12: mavsdk.rpc.gimbal.TakeControlResponse
	(*ReleaseControlRequest)(nil),          // 13: mavsdk.rpc.gimbal.ReleaseControlRequest
	(*ReleaseControlResponse)(nil),         // 14: mavsdk.rpc.gimbal.ReleaseControlResponse
	(*SubscribeControlRequest)(nil),        // 15: mavsdk.rpc.gimbal.SubscribeControlRequest
	(*ControlResponse)(nil),                // 16: mavsdk.rpc.gimbal.ControlResponse
	(*ControlStatus)(nil),                  // 17: mavsdk.rpc.gimbal.ControlStatus
	(*GimbalResult)(nil),                   // 18: mavsdk.rpc.gimbal.GimbalResult
}
var file_gimbal_proto_depIdxs = []int32{
	18, // 0: mavsdk.rpc.gimbal.SetPitchAndYawResponse.gimbal_result:type_name -> mavsdk.rpc.gimbal.GimbalResult
	18, // 1: mavsdk.rpc.gimbal.SetPitchRateAndYawRateResponse.gimbal_result:type_name -> mavsdk.rpc.gimbal.GimbalResult
	0,  // 2: mavsdk.rpc.gimbal.SetModeRequest.gimbal_mode:type_name -> mavsdk.rpc.gimbal.GimbalMode
	18, // 3: mavsdk.rpc.gimbal.SetModeResponse.gimbal_result:type_name -> mavsdk.rpc.gimbal.GimbalResult
	18, // 4: mavsdk.rpc.gimbal.SetRoiLocationResponse.gimbal_result:type_name -> mavsdk.rpc.gimbal.GimbalResult
	1,  // 5: mavsdk.rpc.gimbal.TakeControlRequest.control_mode:type_name -> mavsdk.rpc.gimbal.ControlMode
	18, // 6: mavsdk.rpc.gimbal.TakeControlResponse.gimbal_result:type_name -> mavsdk.rpc.gimbal.GimbalResult
	18, // 7: mavsdk.rpc.gimbal.ReleaseControlResponse.gimbal_result:type_name -> mavsdk.rpc.gimbal.GimbalResult
	17, // 8: mavsdk.rpc.gimbal.ControlResponse.control_status:type_name -> mavsdk.rpc.gimbal.ControlStatus
	1,  // 9: mavsdk.rpc.gimbal.ControlStatus.control_mode:type_name -> mavsdk.rpc.gimbal.ControlMode
	2,  // 10: mavsdk.rpc.gimbal.GimbalResult.result:type_name -> mavsdk.rpc.gimbal.GimbalResult.Result
	3,  // 11: mavsdk.rpc.gimbal.GimbalService.SetPitchAndYaw:input_type -> mavsdk.rpc.gimbal.SetPitchAndYawRequest
	5,  // 12: mavsdk.rpc.gimbal.GimbalService.SetPitchRateAndYawRate:input_type -> mavsdk.rpc.gimbal.SetPitchRateAndYawRateRequest
	7,  // 13: mavsdk.rpc.gimbal.GimbalService.SetMode:input_type -> mavsdk.rpc.gimbal.SetModeRequest
	9,  // 14: mavsdk.rpc.gimbal.GimbalService.SetRoiLocation:input_type -> mavsdk.rpc.gimbal.SetRoiLocationRequest
	11, // 15: mavsdk.rpc.gimbal.GimbalService.TakeControl:input_type -> mavsdk.rpc.gimbal.TakeControlRequest
	13, // 16: mavsdk.rpc.gimbal.GimbalService.ReleaseControl:input_type -> mavsdk.rpc.gimbal.ReleaseControlRequest
	15, // 17: mavsdk.rpc.gimbal.GimbalService.SubscribeControl:input_type -> mavsdk.rpc.gimbal.SubscribeControlRequest
	4,  // 18: mavsdk.rpc.gimbal.GimbalService.SetPitchAndYaw:output_type -> mavsdk.rpc.gimbal.SetPitchAndYawResponse
	6,  // 19: mavsdk.rpc.gimbal.GimbalService.SetPitchRateAndYawRate:output_type -> mavsdk.rpc.gimbal.SetPitchRateAndYawRateResponse
	8,  // 20: mavsdk.rpc.gimbal.GimbalService.SetMode:output_type -> mavsdk.rpc.gimbal.SetModeResponse
	10, // 21: mavsdk.rpc.gimbal.GimbalService.SetRoiLocation:output_type -> mavsdk.rpc.gimbal.SetRoiLocationResponse
	12, // 22: mavsdk.rpc.gimbal.GimbalService.TakeControl:output_type -> mavsdk.rpc.gimbal.TakeControlResponse
	14, // 23: mavsdk.rpc.gimbal.GimbalService.ReleaseControl:output_type -> mavsdk.rpc.gimbal.ReleaseControlResponse
	16, // 24: mavsdk.rpc.gimbal.GimbalService.SubscribeControl:output_type -> mavsdk.rpc.gimbal.ControlResponse
	18, // [18:25] is the sub-list for method output_type
	11, // [11:18] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_gimbal_proto_init() }
func file_gimbal_proto_init() {
	if File_gimbal_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gimbal_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPitchAndYawRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gimbal_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPitchAndYawResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gimbal_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPitchRateAndYawRateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gimbal_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPitchRateAndYawRateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gimbal_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetModeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gimbal_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetModeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gimbal_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRoiLocationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gimbal_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRoiLocationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gimbal_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TakeControlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gimbal_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TakeControlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gimbal_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseControlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gimbal_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseControlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gimbal_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeControlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gimbal_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gimbal_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gimbal_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GimbalResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gimbal_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gimbal_proto_goTypes,
		DependencyIndexes: file_gimbal_proto_depIdxs,
		EnumInfos:         file_gimbal_proto_enumTypes,
		MessageInfos:      file_gimbal_proto_msgTypes,
	}.Build()
	File_gimbal_proto = out.File
	file_gimbal_proto_rawDesc = nil
	file_gimbal_proto_goTypes = nil
	file_gimbal_proto_depIdxs = nil
}
